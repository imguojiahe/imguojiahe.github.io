<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kevin Guo 的博客</title>
    <link>https://imguojiahe.github.io/</link>
    
    <atom:link href="https://imguojiahe.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>人啊，认识你自己</description>
    <pubDate>Sun, 09 Feb 2025 14:39:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>20231229题解</title>
      <link>https://imguojiahe.github.io/2025/02/09/20231229%E9%A2%98%E8%A7%A3/</link>
      <guid>https://imguojiahe.github.io/2025/02/09/20231229%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Sun, 09 Feb 2025 14:39:10 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 2023/12/29 元旦欢乐赛（伪）题解</span><br><span class="line"></span><br><span class="line">T1-seq</span><br><span class="line">核心算法：DP</span><br><span class="line"></span><br><span class="line">按照正整数从小到大的顺序去替换每一个序列元素。每次处理完的一定是两个序列前缀</span><br><span class="line">设f[i][j]表示考虑A的前i个元素、B的前j个元素，最后使用的正整数的最小值</span><br><span class="line">两种转移：</span><br><span class="line">a. 从f[i-1][j]过来，要替换A[i]，计算出A[i]应该用什么正整数替换</span><br><span class="line">b. 从f[i][j-1]过来，要替换B[j]，计算出B[j]应该用什么正整数替换</span><br><span class="line">f[i][j]取两种方案的最小值</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T2 - triangle</span><br><span class="line">核心算法：前缀和</span><br><span class="line"></span><br><span class="line">考虑直线是垂直于x轴的情况，另一种情况同理</span><br><span class="line">假设直线为x=x&#x27;（某条竖线）</span><br><span class="line">三角形被一分为二，当且仅当三角形最靠左的顶点在竖线左边（顶点坐标中最小的x&lt;x&#x27;），最靠右的顶点在竖线右边（顶点坐标中最大的x&gt;x&#x27;）</span><br><span class="line">所以对于每一条竖线，前缀和预处理出有多少个三角形最左的顶点在它及左边（记为s1[x]）、三角形最右的顶点在它及左边（记为s2[x]）</span><br><span class="line">那么对于x=x&#x27;，答案为s1[x&#x27;-1] - x2[x&#x27;]</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T3 - matrix</span><br><span class="line">核心算法：单调栈</span><br><span class="line"></span><br><span class="line">考虑恰好以某个位置为右下角有多少个合法的子矩阵</span><br><span class="line"> *   ***</span><br><span class="line">** *****</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">对于上图右下角的考虑，等同于下图</span><br><span class="line">     ***</span><br><span class="line">   *****</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">从左往右先是高度3的区域（宽3），再是高度4的区域（宽2），最后是高度5个区域（宽3）</span><br><span class="line">因此，上图右下角所对应的矩阵数是 3*3 + 4*2 + 5*3</span><br><span class="line">我们先计算出以每个位置为下端的向上拥有相同元素的长条高度</span><br><span class="line">对于每一行，单调栈维护出一系列高度递增的元素相同的矩形区域即可求解</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T4 - calc</span><br><span class="line">核心算法：数学、高精度</span><br><span class="line"></span><br><span class="line">通过裂项、通分等，对式子进行化简，然后高精度</span><br><span class="line">对于最后既约分数的计算，要注意到，公因子的范围不会超过N+M-1，所以，除法我们只需要高精度除以单精度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T5 - graph</span><br><span class="line">核心算法：最小生成树</span><br><span class="line"></span><br><span class="line">最终只能是势能高的连向势能低的</span><br><span class="line">对于第一问的求解，只需要做个dfs/bfs遍历</span><br><span class="line">在第一问的基础上计算第二问，我们只考虑对答案有意义的有向边</span><br><span class="line">将这些边按终点势能从大到小（排序的第一关键字），按边权从小到大排序（排序的第二关键字）</span><br><span class="line">然后做Kruskal（只是边的排序方式不一样，剩下算法操作不变）</span><br><span class="line"></span><br><span class="line">当然，本题也可以用Prim求解，方法自行考虑</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/">剪贴板</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/09/20231229%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>20230210学校比赛</title>
      <link>https://imguojiahe.github.io/2025/02/09/20230210%E5%AD%A6%E6%A0%A1%E6%AF%94%E8%B5%9B/</link>
      <guid>https://imguojiahe.github.io/2025/02/09/20230210%E5%AD%A6%E6%A0%A1%E6%AF%94%E8%B5%9B/</guid>
      <pubDate>Sun, 09 Feb 2025 14:37:36 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;T1:&lt;/p&gt;
&lt;p&gt;枚举区间用插入排序的方法维护区间内最大的100个数，和用链表维护区间外的最大值&lt;/p&gt;
&lt;p&gt;枚举交换的次数，把区间内最小的数和区间外头最大的数交换。&lt;/p&gt;
&lt;p&gt;T2:&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>T1:</p><p>枚举区间用插入排序的方法维护区间内最大的100个数，和用链表维护区间外的最大值</p><p>枚举交换的次数，把区间内最小的数和区间外头最大的数交换。</p><p>T2:</p>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/">剪贴板</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/09/20230210%E5%AD%A6%E6%A0%A1%E6%AF%94%E8%B5%9B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>快读快写</title>
      <link>https://imguojiahe.github.io/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/</link>
      <guid>https://imguojiahe.github.io/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/</guid>
      <pubDate>Sun, 09 Feb 2025 14:36:15 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">T a = (T)<span class="number">0</span>, b = (T)<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">b = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">a = ((T)a &lt;&lt; <span class="number">3</span>) + ((T)a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x = a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; (T)<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; (T)<span class="number">9</span>)&#123;</span><br><span class="line"><span class="built_in">write</span>(x / (T)<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(x % (T)<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> string <span class="title">strread</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    string ret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span> || ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span> || ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span> || ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span> || ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">        ret += ch;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/">剪贴板</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>算法板子</title>
      <link>https://imguojiahe.github.io/2025/02/09/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/</link>
      <guid>https://imguojiahe.github.io/2025/02/09/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/</guid>
      <pubDate>Sun, 09 Feb 2025 14:35:28 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;算法板子&quot;&gt;&lt;a href=&quot;#算法板子&quot; class=&quot;headerlink&quot; title=&quot;算法板子&quot;&gt;&lt;/a&gt;算法板子&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.luogu.com.cn/paste/dea5cl7s&quot;&gt;快读快写: </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="算法板子"><a href="#算法板子" class="headerlink" title="算法板子"></a>算法板子</h1><ol><li><a href="https://www.luogu.com.cn/paste/dea5cl7s">快读快写: 用字符读入方法读入数字</a></li><li><a href="https://www.luogu.com.cn/paste/ggnghzi7">Kruskal算法框架</a></li><li><a href="https://www.luogu.com.cn/paste/dvzoo2co">LCA: 利用倍增法向上爬树寻找相同点</a></li><li><a href="https://www.luogu.com.cn/paste/pfu7qqm1">ST表: 分成有2^n长度组成的小部分，再用类似dp的方法推出其他小部分的最大最小值</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/bmo0jmb6.png">树上差分: 利用差分思想加减点权</a><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/bmo0jmb6.png"></li><li><a href="https://www.luogu.com.cn/paste/6mzkielp">Floyd</a></li><li><a href="https://www.luogu.com.cn/paste/uz83o6u6">Dijkstra</a></li><li><a href="https://www.luogu.com.cn/paste/prgil5e8">线段树</a></li><li><a href="https://www.luogu.com.cn/paste/cnxlsb67">树状数组</a></li><li><a href="https://www.luogu.com.cn/paste/li1jzx1x">KMP &amp; KMP 字符串查找</a></li><li><a href="https://www.luogu.com.cn/paste/l5w5sdtr">拓展KMP</a></li><li><a href="https://www.luogu.com.cn/paste/qzahqnrq">manacher</a></li><li><a href="https://www.luogu.com.cn/paste/e7g2cjz3">树链剖分（树剖）</a></li><li><a href="https://www.luogu.com.cn/paste/z1ptxyu3">后缀数组（SA）: 利用倍增的思想求解字符串所有后缀按字典序排序后的顺序</a></li><li><a href="https://www.luogu.com.cn/paste/eqz4wvhc">AC 自动机: 将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串</a></li><li><a href="https://www.luogu.com.cn/paste/lors79an">压位高精度</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/">剪贴板</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/09/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>强力杀极域电子教室</title>
      <link>https://imguojiahe.github.io/2025/02/09/%E5%BC%BA%E5%8A%9B%E6%9D%80%E6%9E%81%E5%9F%9F%E7%94%B5%E5%AD%90%E6%95%99%E5%AE%A4/</link>
      <guid>https://imguojiahe.github.io/2025/02/09/%E5%BC%BA%E5%8A%9B%E6%9D%80%E6%9E%81%E5%9F%9F%E7%94%B5%E5%AD%90%E6%95%99%E5%AE%A4/</guid>
      <pubDate>Sun, 09 Feb 2025 14:34:41 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;code&gt;taskkill /f /im StudentMain.exe&lt;/code&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p><code>taskkill /f /im StudentMain.exe</code></p>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/">剪贴板</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/09/%E5%BC%BA%E5%8A%9B%E6%9D%80%E6%9E%81%E5%9F%9F%E7%94%B5%E5%AD%90%E6%95%99%E5%AE%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>备忘录</title>
      <link>https://imguojiahe.github.io/2025/02/09/%E5%A4%87%E5%BF%98%E5%BD%95/</link>
      <guid>https://imguojiahe.github.io/2025/02/09/%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
      <pubDate>Sun, 09 Feb 2025 14:31:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;备忘录&quot;&gt;&lt;a href=&quot;#备忘录&quot; class=&quot;headerlink&quot; title=&quot;备忘录&quot;&gt;&lt;/a&gt;备忘录&lt;/h1&gt;&lt;p&gt;ex. &lt;a href=&quot;http://yuantiji.ac/zh/&quot;&gt;原题机&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ex. &lt;a href=&quot;h</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h1><p>ex. <a href="http://yuantiji.ac/zh/">原题机</a></p><p>ex. <a href="https://www.luogu.com.cn/paste/g1g5aa6o">强力杀极域电子教室</a></p><p>ex. <a href="https://www.luogu.com.cn/paste/8ygmwoy2">算法板子</a></p><p>ex. <a href="https://www.luogu.com.cn/paste/dea5cl7s">快读快写</a></p><p>ex. <a href="http://yuantiji.ac/zh/">原题查找站</a></p><p>ex. <a href="https://www.luogu.com.cn/paste/d0ar2y9p">原题查找1</a></p><ol><li><a href="https://www.luogu.com.cn/paste/lwcq1td6">2023&#x2F;2&#x2F;10学校比赛</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/vvrgfpwh.png">P7883框架</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/ai1od25q.png">T225800框架</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/yf4vbvx2.png">P5094框架</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/u9l64rnb.png">春测题解</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/w9ealk20.png">2023&#x2F;3&#x2F;22单调队列参考</a></li><li><a href="https://csacademy.com/app/graph_editor/">生成图</a></li><li><a href="https://www.sharelikes.com.cn/">P社游戏资源</a></li><li><a href="https://game.chronodivide.com/">红警2网页版</a></li><li><a href="https://www.luogu.com.cn/paste/rv1fype4">2023&#x2F;12&#x2F;29题解</a></li></ol><p>ex. <a href="https://www.luogu.com.cn/paste/i0rd6wcb">工具箱</a></p>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/">剪贴板</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/09/%E5%A4%87%E5%BF%98%E5%BD%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>最长公共串题解</title>
      <link>https://imguojiahe.github.io/2023/02/18/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E4%B8%B2%E9%A2%98%E8%A7%A3/</link>
      <guid>https://imguojiahe.github.io/2023/02/18/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E4%B8%B2%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Sat, 18 Feb 2023 10:36:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YjJEjqE.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://i.imgur.com/YjJEjqE.png"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一颗 $n$ 个点的树，每个点 $i$ 上都有一个字符串 $s_i$，求所有两点间简单路径 $x,y(x &lt; y)$ 的个数，满足 $|lcp(s_{p_1} , s_{p_2} , \dots , s_{p_t})| \geq k$ ，其中 $lcp$ 为最长公共前缀， $p_1,\dots,p_t$ 为简单路径上所有经过的点</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数 $n, k$</p><p>接下来的 $n$ 行每行一个字符串，其中第 $i$ 行的字符串是 $s_i$，字符集为 $0$ 到 $9$ 的数字</p><p>接下来的 n-1<em>n</em>−1 行每行两个正整数 $x, y$ ，代表一条树边</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个正整数，代表答案</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6 1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">3 2</span><br><span class="line">1 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><h5 id="【样例解释】"><a href="#【样例解释】" class="headerlink" title="【样例解释】"></a>【样例解释】</h5><p>满足条件的路径仅有 $(1,2),(1,5),(2,5)$ </p><h5 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h5><table><thead><tr><th>subtask 编号</th><th>$n$</th><th>$\sum s_i$</th><th>特殊性质</th><th>分数</th></tr></thead><tbody><tr><td>1</td><td>$\leq 638$</td><td>$\leq 10^5$</td><td>无</td><td>$10$</td></tr><tr><td>2</td><td>$\leq 2000$</td><td>$\leq 10^5$</td><td>无</td><td>$10$</td></tr><tr><td>3</td><td>$\leq 10^5$</td><td>$\leq 3\times 10^6≤3×106$</td><td>无</td><td>$20$</td></tr><tr><td>4</td><td>$\leq 10^5$</td><td>$\leq 3\times 10^6$</td><td>保证树为链</td><td>$20$</td></tr><tr><td>5</td><td>$\leq 10^6$</td><td>$\leq 5\times 10^6$</td><td>任意两字符串公共前缀 $&lt; k$</td><td>$10$</td></tr><tr><td>6</td><td>$\leq 10^6$</td><td>$\leq 5\times 10^6$</td><td>无</td><td>$30$</td></tr></tbody></table><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于题目要求树上简单路径的元素的公共前缀长度至少为 $k$ 的路径个数，所以可以只看每个字符串的前 $k$ 位，如果某个字符串的长度小于 $k$ 则直接排除，在计算时不算这个点</p><p>使用 <code>vector</code> 存边，<code>vector[i]</code> 里面存的是与点 $i$ 相连的所有点。</p><p>计算有多少条路径满足条件时，使用 <code>dfs</code> 搜索，记录某个节点的父亲节点和这个节点的编号，并搜索该节点的所有儿子节点</p><p>然后推导计算某个节点有多少种方案，式子如下图：</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20220504215447041.png" alt="图1"></p><p>最终把所有答案累计求和，输出</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> P1 = <span class="number">2147483647</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> P2 = <span class="number">1437356741</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">T a = (T)<span class="number">0</span>, b = (T)<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">b = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">a = ((T)a &lt;&lt; <span class="number">3</span>) + ((T)a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x = a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; (T)<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; (T)<span class="number">9</span>)&#123;</span><br><span class="line"><span class="built_in">write</span>(x / (T)<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(x % (T)<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//字符串哈希函数</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Hash_s</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line">        ret1 = (ret1 * <span class="number">10949ll</span> + <span class="number">17ll</span> * s[i]) % P1;</span><br><span class="line">        ret2 = (ret2 * <span class="number">21911ll</span> + <span class="number">37ll</span> * s[i]) % P2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret1 &lt;&lt; <span class="number">30</span> | ret2;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//搜索函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="comment">//搜索其所有的子节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != fa) <span class="built_in">dfs</span>(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果该字符串的长度不合法，结束</span></span><br><span class="line">    <span class="keyword">if</span>(a[x] == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//求该点的值</span></span><br><span class="line">    <span class="comment">//分开成两个变量统计</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret1 = <span class="number">0</span>, ret2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v[x]) <span class="keyword">if</span>(i != fa)&#123;<span class="comment">//不走回头路</span></span><br><span class="line">        <span class="comment">//前缀要相等</span></span><br><span class="line">        <span class="keyword">if</span>(a[i] != a[x])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算</span></span><br><span class="line">        ret1 += <span class="number">1ll</span> * b[i];</span><br><span class="line">        ret2 += <span class="number">1ll</span> * b[i] * b[i];</span><br><span class="line">        b[x] += b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum += ret1;</span><br><span class="line">    sum += (ret1 * ret1 - ret2) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//读入</span></span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(s + <span class="number">1</span>) &gt;= k) a[i] = <span class="built_in">Hash_s</span>(k);<span class="comment">//对字符串哈希，使其更好处理</span></span><br><span class="line">        <span class="keyword">else</span> cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">read</span>(l);</span><br><span class="line">        <span class="built_in">read</span>(r);</span><br><span class="line">        v[l].<span class="built_in">emplace_back</span>(r);</span><br><span class="line">        v[r].<span class="built_in">emplace_back</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特判</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">0</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化每个点有的方案个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        b[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搜索</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="built_in">write</span>(sum, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3/">编程题解</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3/%E5%8E%9F%E5%88%9B%E9%A2%98%E7%9B%AE/">原创题目</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E9%A2%98%E8%A7%A3/">题解</category>
      
      
      <comments>https://imguojiahe.github.io/2023/02/18/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E4%B8%B2%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>USACO23JAN Following Directions S 题解</title>
      <link>https://imguojiahe.github.io/2023/02/18/USACO23JAN_Following_Directions_S_%E9%A2%98%E8%A7%A3/</link>
      <guid>https://imguojiahe.github.io/2023/02/18/USACO23JAN_Following_Directions_S_%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Sat, 18 Feb 2023 10:36:04 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;p&gt;预处理每个点经过的牛数 $cnt_{i, j}$，每次更改一个点的指向时，计算更改前的终点坐标 &lt;code&gt;Old&lt;/cod</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>预处理每个点经过的牛数 $cnt_{i, j}$，每次更改一个点的指向时，计算更改前的终点坐标 <code>Old</code> 和更改后的终点坐标 <code>New</code>（不要忘了修改是一直保留的，在计算终点的过程中要顺便更改途经点的牛数和出发点的路牌方向 <del>，某蒟蒻在这个问题上调了 10min</del>）。</p><p>新答案是旧答案 $ans$ 减去出发点牛数 $cnt_{x, y}$ 与 旧终点花费 <code>a[oldx][oldy].x</code> 的积， 加上出发点牛数 $cnt_{x, y}$ 与 新终点花费 <code>a[newx][newy].x</code> 的积。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> NR = <span class="number">15</span> * <span class="number">1e2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="built_in">Node</span>()&#123;</span><br><span class="line">        c = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">&#125;a[NR + <span class="number">10</span>][NR + <span class="number">10</span>];   <span class="comment">//结构体存储输入</span></span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> cnt[NR + <span class="number">10</span>][NR + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">//读入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            a[i][j].c = s[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i][n + <span class="number">1</span>].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[n + <span class="number">1</span>][j].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//预处理每个点经过的牛数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= n + <span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == n + <span class="number">1</span> &amp;&amp; j == n + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= n &amp;&amp; j &lt;= n)&#123;   <span class="comment">//住所</span></span><br><span class="line">                <span class="keyword">if</span>(a[i - <span class="number">1</span>][j].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                    cnt[i][j] += cnt[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j - <span class="number">1</span>].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                    cnt[i][j] += cnt[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                cnt[i][j]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;   <span class="comment">//饲料桶</span></span><br><span class="line">                <span class="keyword">if</span>(i == n + <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i - <span class="number">1</span>][j].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                        cnt[i][j] += cnt[i - <span class="number">1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == n + <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i][j - <span class="number">1</span>].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                        cnt[i][j] += cnt[i][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算最初花费</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        sum += <span class="number">1ll</span> * cnt[n + <span class="number">1</span>][i] * a[n + <span class="number">1</span>][i].x;</span><br><span class="line">        sum += <span class="number">1ll</span> * cnt[i][n + <span class="number">1</span>] * a[i][n + <span class="number">1</span>].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);   <span class="comment">//输出</span></span><br><span class="line">    <span class="comment">//处理更改</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);   <span class="comment">//读入</span></span><br><span class="line">        <span class="comment">//计算旧路径</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> posx = x, posy = y;</span><br><span class="line">        <span class="keyword">while</span>(posx != n + <span class="number">1</span> &amp;&amp; posy != n + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                posx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                posy++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[posx][posy] -= cnt[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> tmpx = posx, tmpy = posy;</span><br><span class="line">        posx = x, posy = y;</span><br><span class="line">        <span class="comment">//更改方向</span></span><br><span class="line">        <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">            a[posx][posy].c = <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">            a[posx][posy].c = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算新路径</span></span><br><span class="line">        <span class="keyword">while</span>(posx != n + <span class="number">1</span> &amp;&amp; posy != n + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                posx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                posy++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[posx][posy] += cnt[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算并输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum - cnt[x][y] * a[tmpx][tmpy].x</span><br><span class="line">                             + cnt[x][y] * a[posx][posy].x);</span><br><span class="line">        sum -= cnt[x][y] * a[tmpx][tmpy].x;</span><br><span class="line">        sum += cnt[x][y] * a[posx][posy].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3/">编程题解</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%E9%A2%98%E7%9B%AE/">洛谷题目</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E9%A2%98%E8%A7%A3/">题解</category>
      
      
      <comments>https://imguojiahe.github.io/2023/02/18/USACO23JAN_Following_Directions_S_%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>USACO2023Jan银组题解</title>
      <link>https://imguojiahe.github.io/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E9%A2%98%E8%A7%A3/</link>
      <guid>https://imguojiahe.github.io/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Sat, 18 Feb 2023 10:36:04 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Find-and-Replace&quot;&gt;&lt;a href=&quot;#Find-and-Replace&quot; class=&quot;headerlink&quot; title=&quot;Find and Replace&quot;&gt;&lt;/a&gt;Find and Replace&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;目前还不正确</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Find-and-Replace"><a href="#Find-and-Replace" class="headerlink" title="Find and Replace"></a>Find and Replace</h1><p><strong>目前还不正确的思路</strong></p><p>想象为图，每个字母向ta要转换为的那个字母连接一条单向边，接着遍历每个字母，处理一下情况：</p><ol><li>字母 c 同时要变成字母 c1 和字母 c2，若发生这种情况，输出 $-1$，处理下一个数据。</li><li>字母 c1 指向字母 c2 且字母 c2 <strong>也</strong>指向字母 c1,若发生这种情况，按键总数加 $3$。</li><li>字母 c1 指向字母 c2 且字母 c2 <strong>不</strong>指向字母 c1,若发生这种情况，按键总数加 $1$。</li></ol><h1 id="Following-Directions"><a href="#Following-Directions" class="headerlink" title="Following Directions"></a>Following Directions</h1><p><a href="https://s1.ax1x.com/2023/01/31/pS0hLkT.jpg">正确的</a>思路</p><p>预处理每个点经过的牛数 $cnt_{i, j}$，每次更改一个点的指向时，计算更改前的终点坐标 <code>Old</code> 和更改后的终点坐标 <code>New</code> （不要忘了修改是一直保留的，在计算终点的过程中要顺便更改途经点的牛数和出发点的路牌方向 <del>，某蒟蒻在这个问题上调了10min</del>）。</p><p>新答案是旧答案 $ans$ 减去出发点牛数 $cnt_{x, y}$ 与 旧终点花费 $a[oldx][oldy].x$ 的积， 加上出发点牛数 $cnt_{x, y}$ 与 新终点花费 $a[newx][newy].x$ 的积。</p><h1 id="Moo-Route"><a href="#Moo-Route" class="headerlink" title="Moo Route"></a>Moo Route</h1><p><a href="https://s1.ax1x.com/2023/01/31/pS04tjs.jpg">正确的</a>思路</p><p>构造题，一开始必定会向右走，所以第一步先输出’R’，再从 $1$ 开始模拟。每次比较当前和当前左面一个的大小，当前大就向右走并减少一次穿过当前点的次数；当前小就向左走并减少一次穿过左边点的次数</p>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3%EF%BC%8CUSACO%E9%A2%98%E7%9B%AE/">编程题解，USACO题目</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E9%A2%98%E8%A7%A3/">题解</category>
      
      
      <comments>https://imguojiahe.github.io/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>USACO2023Jan银组翻译</title>
      <link>https://imguojiahe.github.io/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E7%BF%BB%E8%AF%91/</link>
      <guid>https://imguojiahe.github.io/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E7%BF%BB%E8%AF%91/</guid>
      <pubDate>Sat, 18 Feb 2023 10:36:04 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Find-and-Replace&quot;&gt;&lt;a href=&quot;#Find-and-Replace&quot; class=&quot;headerlink&quot; title=&quot;Find and Replace&quot;&gt;&lt;/a&gt;Find and Replace&lt;/h1&gt;&lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Find-and-Replace"><a href="#Find-and-Replace" class="headerlink" title="Find and Replace"></a>Find and Replace</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>Bessie正在使用最新、最NB的文本编辑软件miV!！从一个仅由大写和小写英文字母组成的输入字符串开始，希望将其转化为某个输出字符串。只需一个按键，miV就能让她替换所有出现的一个英文字母 $c_1$ 为 $c_2$ 。例如，给定字符串 $aAbBa$，如果Bessie选择 $c_1$ 为 ‘a’ 且 $c_2$ 为 ‘B’，则所给的字符串转化为 $BAbBBBAbBB$</p><p>贝西是一头忙碌的奶牛，所以对于 $T(1 \leqslant t \leqslant 10) $ 组数据中的每一个， 输出将她的输入字符串转化为她所期望的输出字符串所需的最少按键数。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行为一个正整数 $T$，表示独立测试案例的数量。</p><p>之后的 $T$ 对每对包含一个长度相同的原始和期望字符串。所有字符都是大写或小写的英文字母。所有字符串的长度之和不超过 $10^5$。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试案例，输出将输入字符串变为输出字符串所需的最小敲击键数，或$-1$如果不可能这样做。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">BBC</span><br><span class="line">ABC</span><br><span class="line">abc</span><br><span class="line">bbc</span><br><span class="line">ABCD</span><br><span class="line">BACD</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">-1</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>第一个输入字符串与它的输出字符串相同，所以不需要击键。</p><p>第二个输入字符串不能被改变成其输出字符串，因为Bessie不能改变一个 ‘B’ 变为 ‘A’ 而保存另一个字符为 ‘B’。</p><p>第三个输入字符串可以通过改变 ‘a’ 为 ‘b’ 变为输出字符串。</p><p>最后一个输入字符串可以像这样改成它的输出字符串：$ABCD→EBCD→EACD→BACD$</p><h1 id="Following-Directions"><a href="#Following-Directions" class="headerlink" title="Following Directions"></a>Following Directions</h1><h2 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h2><p><strong>注意：这个问题的时间限制是8秒，是默认值的四倍</strong>。</p><p>农民约翰有一块 $(n + 1) \times (n + 1) (1 \leqslant n \leqslant 10)$ 正方形的大田，被分割成一个个的小块。</p><p>方格 $(i, j)$ 表示上数第 $i$ 行左数第 $j$ 列的方格。对于每个方格 &#x3D;&#x3D;$(i, j) (1 \leqslant i, j \leqslant n)$&#x3D;&#x3D;，其中都有一头牛，而每一个这样的方格也包含一个指向右边或向下的路标。对于每个方格 &#x3D;&#x3D;$(i, j) (i &#x3D; n + 1 或j &#x3D; n + 1)$&#x3D;&#x3D; （$(n + 1, n + 1)$ 除外）有一大桶的奶牛饲料。每个大桶里都有不同价格的奶牛饲料。位于 $(i, j)$ 的价格为 $c_{i, j}$。</p><p>每天晚餐时间，农夫约翰敲响晚餐的钟声，每头牛一直沿着路标的方向走，直到到达一个大桶，然后从这个大桶中获得食物。然后，奶牛们都回到它们原来的位置，准备第二天的工作。</p><p>为了维持预算，农夫约翰想知道每天喂养所有奶牛的总成本。然而，在每天的晚餐前，一些在方格 $i, j$ 里的奶牛翻转其指针的方向（从右到下或反之），在接下来的日子里，路标也会保持在这个方向，除非后来被翻转回来。</p><p>给出每天被翻转的路标的坐标，输出每天的成本(总共有 $Q (1 \leqslant Q \leqslant 1500)$)</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>第一行为一个正整数 $N$。</p><p>之后的 $N + 1$ 行表示整个牧场的路标以及价格(R, D分别代表指向右方或下方的路标)。</p><p>下一行为一个正整数 $Q$。</p><p>之后的 $Q$ 行每行包括两个正整数 $(i, j)$，这是其标志物在相应日期被翻转的单元的坐标。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>共 $Q + 1$ 行：总成本的原始值，然后是每次翻转后的总成本值。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">RR 1</span><br><span class="line">DD 10</span><br><span class="line">100 500</span><br><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">602</span><br><span class="line">701</span><br><span class="line">602</span><br><span class="line">701</span><br><span class="line">1501</span><br></pre></td></tr></table></figure><h1 id="Moo-Route"><a href="#Moo-Route" class="headerlink" title="Moo Route"></a>Moo Route</h1><h2 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h2><p>农民Nhoj把Bessie丢在了荒郊野外！在时刻$t &#x3D; 0$ 时，Bessie一条无限的数轴上位于 $x &#x3D; 0$。她每秒疯狂地通过向左或向右移动 $1$ 个单位来寻找一个出口。然而，实际上并没有出口，而且在 $T$ 秒后，Bessie又回到了 $x &#x3D; 0$.</p><p>农民Nhoj试图追踪Bessie，但只知道Bessie穿过 $x &#x3D; 0.5, 1.5, 2.5, 3.5, …, (N - 1).5$的次数，由一个数组 $A()$ 给出。Bessie不可能到达 $x &gt; n$ 或 $x &lt; 0$的点。</p><p>特别是，Bessie的路线可以用一个字符串串 $T&#x3D;∑^{N−1}_{i&#x3D;0}Ai$ 为 ‘L’ 或 ‘R’ ，是Bessie第 $i$ 秒的运动方向。方向改变的数量被定义为出现在 “LR” 的数量加上 “RL” 的数量。</p><p>请帮助农夫Nhoj找到贝西可能走的与A一致的路线，并尽量减少方向变化的次数。保证至少有一条有效路线。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $n$</p><p>第二行 $n$ 个整数，代表 $A_0, A_1, …A{n - 1}$</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>一个字符串串 $T&#x3D;∑^{N−1}_{i&#x3D;0}Ai$ 为 ‘L’ 或 ‘R’ ，代表 Bessie 在第 $i$ 秒的行进方向。如果有多条路线，输出转向次数最小的任意一条。</p>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E7%BF%BB%E8%AF%91%EF%BC%8CUSACO%E9%A2%98%E7%9B%AE/">编程题目翻译，USACO题目</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%BF%BB%E8%AF%91/">翻译</category>
      
      
      <comments>https://imguojiahe.github.io/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E7%BF%BB%E8%AF%91/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
