<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AceMetric 的博客</title>
    <link>https://imguojiahe.github.io/</link>
    
    <atom:link href="https://imguojiahe.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Face the fear, Build the future</description>
    <pubDate>Thu, 13 Feb 2025 06:56:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>exCRT</title>
      <link>https://imguojiahe.github.io/2025/02/13/exCRT/</link>
      <guid>https://imguojiahe.github.io/2025/02/13/exCRT/</guid>
      <pubDate>Thu, 13 Feb 2025 06:56:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;exCRT&quot;&gt;&lt;a href=&quot;#exCRT&quot; class=&quot;headerlink&quot; title=&quot;exCRT&quot;&gt;&lt;/a&gt;exCRT&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="exCRT"><a href="#exCRT" class="headerlink" title="exCRT"></a>exCRT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">exgcd</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pair&lt;T, T&gt; ret = <span class="built_in">exgcd</span>(b, a % b);</span><br><span class="line">    T tmp = ret.first;</span><br><span class="line">    ret.first = ret.second;</span><br><span class="line">    ret.second = tmp - (a / b) * ret.second;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">excrt</span><span class="params">(vector&lt;pair&lt;T, T&gt; &gt; &amp;conv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// x = conv[].second (mod conv[].first)</span></span><br><span class="line">    <span class="keyword">if</span>(conv.<span class="built_in">empty</span>()) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">    T m0 = conv.<span class="built_in">front</span>().first, a0 = conv.<span class="built_in">front</span>().second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; conv.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        T m = conv[i].first, a = conv[i].second;</span><br><span class="line">        PI1 u = <span class="built_in">exgcd</span>(m0, m);</span><br><span class="line">        T d = __gcd(m0, m);</span><br><span class="line">        <span class="keyword">if</span>((a - a0) % d) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">        T m3 = m0 / d * m;</span><br><span class="line">        a0 = ((a * (m0 / d) % m3) * u.first % m3 + (a0 * (m / d) % m3) * u.second % m3 + m3) % m3;</span><br><span class="line">        m0 = m3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/13/exCRT/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>欧拉筛 &amp; 求欧拉函数</title>
      <link>https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</link>
      <guid>https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Wed, 12 Feb 2025 08:29:36 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;欧拉筛-amp-求欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉筛-amp-求欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉筛 &amp;amp; 求欧拉函数&quot;&gt;&lt;/a&gt;欧拉筛 &amp;amp; 求欧拉函数&lt;/h1&gt;&lt;figure class=&quot;highlight </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="欧拉筛-amp-求欧拉函数"><a href="#欧拉筛-amp-求欧拉函数" class="headerlink" title="欧拉筛 &amp; 求欧拉函数"></a>欧拉筛 &amp; 求欧拉函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> LL NR = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">bool</span> is_prime[NR + <span class="number">10</span>];</span><br><span class="line">vector&lt;LL&gt; pri;</span><br><span class="line">LL phi[NR + <span class="number">10</span>];</span><br><span class="line">LL sp[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EulerSeive</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="built_in">sizeof</span>(is_prime));</span><br><span class="line">    is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>;i &lt;= x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime[i])&#123;</span><br><span class="line">            pri.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : pri)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1ll</span> * i * j &gt; <span class="number">1ll</span> * x) <span class="keyword">continue</span>;</span><br><span class="line">            is_prime[i * j] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                phi[i * j] = phi[i] * j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i * j] = phi[i] * phi[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>压位高精度</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/</guid>
      <pubDate>Mon, 10 Feb 2025 13:46:19 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;压位高精度&quot;&gt;&lt;a href=&quot;#压位高精度&quot; class=&quot;headerlink&quot; title=&quot;压位高精度&quot;&gt;&lt;/a&gt;压位高精度&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="压位高精度"><a href="#压位高精度" class="headerlink" title="压位高精度"></a>压位高精度</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PNR = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PL = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> LL PP = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hugeint</span>&#123;</span><br><span class="line">    LL x[PNR + <span class="number">10</span>];</span><br><span class="line">    <span class="built_in">Hugeint</span>()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="built_in">sizeof</span>(x));</span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">strtohi</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">strtohi</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        LL tmp = <span class="number">0</span>, mul = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line">            tmp += mul * <span class="number">1ll</span> * (s[len - i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            mul *= <span class="number">10ll</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % PL == <span class="number">0</span>)&#123;</span><br><span class="line">                x[++x[<span class="number">0</span>]] = tmp;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">                mul = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp) x[++x[<span class="number">0</span>]] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == x[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%08lld&quot;</span>, x[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> ==(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x[<span class="number">0</span>] != y.x[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x[i] != y.x[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> !=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x[<span class="number">0</span>] != y.x[<span class="number">0</span>]) <span class="keyword">return</span> x.x[<span class="number">0</span>] &lt; y.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x[i] != y.x[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> x.x[i] &lt; y.x[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y || x == y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt;= y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y || x == y;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> +(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        z.x[i] += x.x[i] + y.x[i];</span><br><span class="line">        z.x[i + <span class="number">1</span>] += z.x[i] / PP;</span><br><span class="line">        z.x[i] %= PP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> -(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        z.x[i] += x.x[i] - y.x[i];</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[i + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">            z.x[i] += PP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> *(Hugeint x, Hugeint y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= x.x[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= y.x[<span class="number">0</span>];j++)&#123;</span><br><span class="line">            z.x[i + j - <span class="number">1</span>] += x.x[i] * y.x[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    z.x[<span class="number">0</span>] = x.x[<span class="number">0</span>] + y.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= z.x[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        z.x[i + <span class="number">1</span>] += z.x[i] / PP;</span><br><span class="line">        z.x[i] %= PP;</span><br><span class="line">        <span class="keyword">if</span>(z.x[z.x[<span class="number">0</span>] + <span class="number">1</span>] &gt; <span class="number">0</span>) z.x[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(z.x[z.x[<span class="number">0</span>]] == <span class="number">0</span> &amp;&amp; z.x[<span class="number">0</span>] &gt; <span class="number">1</span>) z.x[<span class="number">0</span>]--;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> /(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> LL &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    z.x[<span class="number">0</span>] = x.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = z.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        z.x[i] </span><br><span class="line">        = z.x[i + <span class="number">1</span>] % y * PP + x.x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = z.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        z.x[i] /= y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(z.x[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; z.x[z.x[<span class="number">0</span>]] == <span class="number">0</span>) z.x[<span class="number">0</span>]--;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AC 自动机</title>
      <link>https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <pubDate>Mon, 10 Feb 2025 13:45:47 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;AC-自动机&quot;&gt;&lt;a href=&quot;#AC-自动机&quot; class=&quot;headerlink&quot; title=&quot;AC 自动机&quot;&gt;&lt;/a&gt;AC 自动机&lt;/h1&gt;&lt;p&gt;将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串&lt;/p&gt;
&lt;p&gt;失配标记：&lt;/p&gt;
&lt;f</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h1><p>将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串</p><p>失配标记：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">2e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">128</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> KR = <span class="number">2e6</span>;</span><br><span class="line">string t[NR + <span class="number">10</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> nxt[MR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> fail;</span><br><span class="line">&#125;tr[KR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> vis[KR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tmp].nxt[str[i - <span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">tr[tmp].nxt[str[i - <span class="number">1</span>]] = ++id;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tr[tmp].nxt[str[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tmp].nxt[str[i - <span class="number">1</span>]])&#123;</span><br><span class="line">tmp = tr[tmp].nxt[str[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vis[tmp];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[KR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildFail</span><span class="params">()</span></span>&#123;</span><br><span class="line">tr[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">128</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[<span class="number">0</span>].nxt[i])&#123;</span><br><span class="line">tr[tr[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">emplace</span>(tr[<span class="number">0</span>].nxt[i]);</span><br><span class="line">mp[<span class="number">0</span>].<span class="built_in">emplace_back</span>(tr[<span class="number">0</span>].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tr[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">128</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].nxt[i])&#123;</span><br><span class="line">tr[tr[u].nxt[i]].fail = tr[tr[u].fail].nxt[i];</span><br><span class="line">q.<span class="built_in">emplace</span>(tr[u].nxt[i]);</span><br><span class="line">mp[tr[tr[u].fail].nxt[i]].<span class="built_in">emplace_back</span>(tr[u].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tr[u].nxt[i] = tr[tr[u].fail].nxt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACauto</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">tmp = tr[tmp].nxt[s[i]];</span><br><span class="line">vis[tmp]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">vis[u] += vis[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cin&gt;&gt;t[i];</span><br><span class="line"><span class="built_in">insert</span>(t[i]);</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">buildFail</span>();</span><br><span class="line"><span class="built_in">ACauto</span>();</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(t[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>后缀数组 Suffix Array</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/</guid>
      <pubDate>Mon, 10 Feb 2025 13:45:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;后缀数组-Suffix-Array&quot;&gt;&lt;a href=&quot;#后缀数组-Suffix-Array&quot; class=&quot;headerlink&quot; title=&quot;后缀数组 Suffix Array&quot;&gt;&lt;/a&gt;后缀数组 Suffix Array&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;2024</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="后缀数组-Suffix-Array"><a href="#后缀数组-Suffix-Array" class="headerlink" title="后缀数组 Suffix Array"></a>后缀数组 Suffix Array</h1><ul><li>2024年12月10日</li></ul><p>利用<strong>倍增</strong>的思想求解字符串所有后缀按字典序排序后的顺序。</p><p>配有<strong>基数排序</strong>优化。</p><ol><li>无常数优化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">4e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="type">int</span> sa[NR + <span class="number">10</span>]; <span class="comment">// suffix array</span></span><br><span class="line"><span class="type">int</span> rk[NR + <span class="number">10</span>]; <span class="comment">// rank</span></span><br><span class="line"><span class="type">int</span> oldrk[NR + <span class="number">10</span>]; <span class="comment">// oldrk</span></span><br><span class="line"><span class="type">int</span> id[NR + <span class="number">10</span>]; <span class="comment">// old sa</span></span><br><span class="line"><span class="type">int</span> cnt[NR + <span class="number">10</span>]; <span class="comment">// base-sort&#x27;s counter</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">rk[i] = s[i];</span><br><span class="line">cnt[rk[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= MR;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[i]]] = i;</span><br><span class="line">cnt[rk[i]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//print(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n || i &lt;= MR;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]])&#123;</span><br><span class="line">rk[sa[i]] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">1</span>;w &lt; n;w &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">//printf(&quot;w=%d\n&quot;, w);</span></span><br><span class="line"><span class="comment">//print(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">id[i] = sa[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i] + w]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i] + w]]] = id[i];</span><br><span class="line">cnt[rk[id[i] + w]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">id[i] = sa[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i]]]] = id[i];</span><br><span class="line">cnt[rk[id[i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gen new rk</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + w &lt;= n &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= n &amp;&amp; oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]] &amp;&amp; oldrk[sa[i] + w] == oldrk[sa[i - <span class="number">1</span>] + w])&#123;</span><br><span class="line">rk[sa[i]] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>有常数优化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">4e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">128</span>;</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="type">int</span> sa[NR + <span class="number">10</span>]; <span class="comment">// suffix array</span></span><br><span class="line"><span class="type">int</span> rk[NR + <span class="number">10</span>]; <span class="comment">// rank</span></span><br><span class="line"><span class="type">int</span> oldrk[NR + <span class="number">10</span>]; <span class="comment">// oldrk</span></span><br><span class="line"><span class="type">int</span> id[NR + <span class="number">10</span>]; <span class="comment">// old sa</span></span><br><span class="line"><span class="type">int</span> cnt[NR + <span class="number">10</span>]; <span class="comment">// base-sort&#x27;s counter</span></span><br><span class="line"><span class="comment">// gennerate new rank</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gennewrk</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n || i &lt;= MR;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rkc = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = rkc;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + w &lt;= n &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= n &amp;&amp; oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]] &amp;&amp; oldrk[sa[i] + w] == oldrk[sa[i - <span class="number">1</span>] + w])&#123;</span><br><span class="line">rk[sa[i]] = rkc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++rkc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">rk[i] = s[i];</span><br><span class="line">cnt[rk[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= MR;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[i]]] = i;</span><br><span class="line">cnt[rk[i]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gennewrk</span>(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">1</span>;w &lt; n;w &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= n - w + <span class="number">1</span>;i--)&#123;</span><br><span class="line">id[++p] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] &gt; w) id[++p] = sa[i] - w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i]]]] = id[i];</span><br><span class="line">cnt[rk[id[i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gennewrk</span>(n, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>树链剖分（树剖）</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%EF%BC%88%E6%A0%91%E5%89%96%EF%BC%89/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%EF%BC%88%E6%A0%91%E5%89%96%EF%BC%89/</guid>
      <pubDate>Mon, 10 Feb 2025 13:44:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;树链剖分（树剖）&quot;&gt;&lt;a href=&quot;#树链剖分（树剖）&quot; class=&quot;headerlink&quot; title=&quot;树链剖分（树剖）&quot;&gt;&lt;/a&gt;树链剖分（树剖）&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="树链剖分（树剖）"><a href="#树链剖分（树剖）" class="headerlink" title="树链剖分（树剖）"></a>树链剖分（树剖）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>针对树上路径操作的一类算法思想</p><p>将树划分成若干条链，将路径操作转化为若干链上的区间操作</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> leftson u &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rightson (u &lt;&lt; 1) + 1</span></span><br><span class="line"><span class="type">const</span> LL NR = <span class="number">1e5</span>;</span><br><span class="line">LL P;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span> * NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> sz[NR + <span class="number">10</span>], fa[NR + <span class="number">10</span>], dep[NR + <span class="number">10</span>], hson[NR + <span class="number">10</span>], top[NR + <span class="number">10</span>], seq[NR + <span class="number">10</span>], dfn[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//                            深度          重儿子        重链的链首     dfs序编号</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//线段树</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    LL sum, add;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segtree</span>&#123;</span><br><span class="line">    Node tr[<span class="number">4</span> * NR + <span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> n, root;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        tr[u].sum = tr[leftson].sum + tr[rightson].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].add)&#123;</span><br><span class="line">            tr[leftson].add += tr[u].add;</span><br><span class="line">            tr[leftson].sum += (tr[leftson].r - tr[leftson].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">            tr[rightson].add += tr[u].add;</span><br><span class="line">            tr[rightson].sum += (tr[rightson].r - tr[rightson].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">            tr[u].add = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, LL d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r)&#123;</span><br><span class="line">            tr[u].sum += (tr[u].r - tr[u].l + <span class="number">1</span>) * d;</span><br><span class="line">            tr[u].add += d;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        LL mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(leftson, l, r, d);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) <span class="built_in">modify</span>(rightson, l, r, d);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        LL mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) ret += <span class="built_in">query</span>(leftson, l, r);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) ret += <span class="built_in">query</span>(rightson, l, r);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            tr[u] = Node&#123;l, r, a[arr[l]], <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u].l = l;</span><br><span class="line">        tr[u].r = r;</span><br><span class="line">        LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(leftson, l, mid, arr);</span><br><span class="line">        <span class="built_in">build</span>(rightson, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segtree seg;</span><br><span class="line"><span class="comment">//树剖初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father, <span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">sz[u] = <span class="number">1</span>, fa[u] = father, dep[u] = d, hson[u] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u]) <span class="keyword">if</span>(v != fa[u])&#123;</span><br><span class="line"><span class="built_in">dfs_init</span>(v, u, d + <span class="number">1</span>);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(hson[u] == <span class="number">-1</span> || sz[hson[u]] &lt; sz[v]) hson[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树链剖分</span></span><br><span class="line">LL dfsid = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_divide</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">top[u] = t;</span><br><span class="line">dfn[u] = ++dfsid;</span><br><span class="line">seq[dfsid] = u;</span><br><span class="line"><span class="keyword">if</span>(hson[u] == <span class="number">-1</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">dfs_divide</span>(hson[u], t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != hson[u])&#123;</span><br><span class="line"><span class="built_in">dfs_divide</span>(v, v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树剖 × 线段树 修改路径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, LL add)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">seg.<span class="built_in">modify</span>(<span class="number">1</span>, dfn[top[x]], dfn[x], add);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line">seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">min</span>(dfn[x], dfn[y]), <span class="built_in">max</span>(dfn[x], dfn[y]), add);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树剖 × 线段树 查询路径</span></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">LL ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">ret += seg.<span class="built_in">query</span>(<span class="number">1</span>, dfn[top[x]], dfn[x]);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line">ret += seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="built_in">min</span>(dfn[x], dfn[y]), <span class="built_in">max</span>(dfn[x], dfn[y]));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, T, rt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%lld&quot;</span>, &amp;n, &amp;T, &amp;rt, &amp;P);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">mp[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">mp[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//开始树剖</span></span><br><span class="line"><span class="built_in">dfs_init</span>(rt, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dfsid = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs_divide</span>(rt, rt);</span><br><span class="line">   <span class="comment">//建树</span></span><br><span class="line">seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, seq);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">LL op, x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;  <span class="comment">//将树从 x 到 y 结点最短路径上所有节点的值都加上 z</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line"><span class="built_in">modify</span>(x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;  <span class="comment">//求树从 x 到 y 结点最短路径上所有节点的值之和</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(x, y) % P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;  <span class="comment">//将以 x 为根节点的子树内所有节点值都加上 z</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;z);</span><br><span class="line">seg.<span class="built_in">modify</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)&#123;  <span class="comment">//求以 x 为根节点的子树内所有节点值之和</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, seg.<span class="built_in">query</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>) % P);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%EF%BC%88%E6%A0%91%E5%89%96%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>manacher</title>
      <link>https://imguojiahe.github.io/2025/02/10/manacher/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/manacher/</guid>
      <pubDate>Mon, 10 Feb 2025 13:43:54 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;manacher&quot;&gt;&lt;a href=&quot;#manacher&quot; class=&quot;headerlink&quot; title=&quot;manacher&quot;&gt;&lt;/a&gt;manacher&lt;/h1&gt;&lt;p&gt;求字符串中最长的回文串。&lt;/p&gt;
&lt;p&gt;不妨设串长为奇，令 $d_i$ 表示 以 $S_i$</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h1><p>求字符串中最长的回文串。</p><p>不妨设串长为奇，令 $d_i$ 表示 以 $S_i$ 为中心的最大回文半径。</p><p><code>P</code> &amp; <code>maxr</code>: 目前找到的最靠右的起点 &amp; 终点</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int NR = 1.1e7;char s[2 * NR + 10];int d[2 * NR + 10];int input()&#123;    string str;    cin&gt;&gt;str;    int len = 0;    s[++len] = &#39;#&#39;;    for(auto i : str)&#123;        s[++len] = i;        s[++len] = &#39;#&#39;;    &#125;    return len;&#125;void Manacher(int len)&#123;    for(int i = 1;i &lt;= len;i++)&#123;        d[i] = 1;    &#125;    int p = 0, maxr = 0;    for(int i = 2;i &lt;= len;i++)&#123;        if(i &lt;= maxr)&#123;            d[i] = min(d[p + maxr - i], maxr - i + 1);        &#125;        while((i + d[i] &lt;= len &amp;&amp; i - d[i] &gt; 0) &amp;&amp; s[i - d[i]] == s[i + d[i]])&#123;            d[i]++;        &#125;        if(i + d[i] - 1 &gt; maxr)&#123;            p = i - d[i] + 1;            maxr = i + d[i] - 1;        &#125;    &#125;    return ;&#125;int main()&#123;    int len = input();//printf(&quot;%d\n%s\n&quot;, len, s + 1);    Manacher(len);    int Max = 0;    for(int i = 1;i &lt;= len;i++)&#123;//printf(&quot;%d &quot;, d[i]);        Max = max(Max, i % 2 ? (d[i] / 2) * 2 : (d[i] / 2) * 2 - 1);    &#125;//printf(&quot;\n&quot;);    printf(&quot;%d\n&quot;, Max);    return 0;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/manacher/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>拓展 KMP (exKMP)</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E6%8B%93%E5%B1%95%20KMP%20(exKMP)/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E6%8B%93%E5%B1%95%20KMP%20(exKMP)/</guid>
      <pubDate>Mon, 10 Feb 2025 13:43:29 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;拓展-KMP-exKMP&quot;&gt;&lt;a href=&quot;#拓展-KMP-exKMP&quot; class=&quot;headerlink&quot; title=&quot;拓展 KMP  (exKMP)&quot;&gt;&lt;/a&gt;拓展 KMP  (exKMP)&lt;/h1&gt;&lt;p&gt;ZA: 自己所有后缀与字符串自己的最长公共前缀&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="拓展-KMP-exKMP"><a href="#拓展-KMP-exKMP" class="headerlink" title="拓展 KMP  (exKMP)"></a>拓展 KMP  (exKMP)</h1><p>ZA: 自己所有后缀与字符串自己的最长公共前缀</p><p>exKMP: <code>t</code> 所有后缀与 <code>s</code> 的最长公共前缀</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longconst int NR = 2e7;char s[NR + 10];char t[NR + 10];int z[NR + 10];int d[NR + 10];void ZA(int len)&#123;    memset(z, 0, sizeof(z));    z[1] = len;    int p = 0, maxr = 0;    for(int i = 2;i &lt;= len;i++)&#123;        if(i &lt;= maxr)&#123;            z[i] = min(z[i - p + 1], maxr - i + 1);        &#125;        while(i + z[i] &lt;= len &amp;&amp; s[1 + z[i]] == s[i + z[i]])&#123;            z[i]++;        &#125;        if(i + z[i] - 1 &gt; maxr)&#123;            p = i;            maxr = i + z[i] - 1;        &#125;    &#125;    return ;&#125;void exKMP(int len1, int len2)&#123;    memset(d, 0, sizeof(d));    int p = 0, maxr = 0;    for(int i = 1;i &lt;= len2;i++)&#123;        if(i &lt;= maxr)&#123;            d[i] = min(z[i - p + 1], maxr - i + 1);        &#125;        while(1 + d[i] &lt;= len1 &amp;&amp; i + d[i] &lt;= len2 &amp;&amp; s[1 + d[i]] == t[i + d[i]])&#123;            d[i]++;        &#125;        if(i + d[i] - 1 &gt; maxr)&#123;            p = i;            maxr = i + d[i] - 1;        &#125;    &#125;    return ;&#125;int main()&#123;//freopen(&quot;P5410_1.in&quot;, &quot;r&quot;, stdin);    scanf(&quot;%s&quot;, t + 1);    scanf(&quot;%s&quot;, s + 1);    int len = strlen(s + 1);    ZA(len);    LL ans = 0;    for(int i = 1;i &lt;= len;i++)&#123;//printf(&quot;%d &quot;, z[i]);        ans ^= 1ll * i * (z[i] + 1);    &#125;//printf(&quot;\n&quot;);    printf(&quot;%lld\n&quot;, ans);    int len2 = strlen(t + 1);     exKMP(len, len2);    ans = 0;    for(int i = 1;i &lt;= len2;i++)&#123;//printf(&quot;%d &quot;, z[i]);        ans ^= 1ll * i * (d[i] + 1);    &#125;    printf(&quot;%lld\n&quot;, ans);    return 0;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E6%8B%93%E5%B1%95%20KMP%20(exKMP)/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>KMP 与 KMP 字符串查找</title>
      <link>https://imguojiahe.github.io/2025/02/10/KMP%20%E4%B8%8E%20KMP%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/KMP%20%E4%B8%8E%20KMP%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</guid>
      <pubDate>Mon, 10 Feb 2025 13:42:37 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;KMP-与-KMP-字符串查找&quot;&gt;&lt;a href=&quot;#KMP-与-KMP-字符串查找&quot; class=&quot;headerlink&quot; title=&quot;KMP 与 KMP 字符串查找&quot;&gt;&lt;/a&gt;KMP 与 KMP 字符串查找&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;strlen(S) </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="KMP-与-KMP-字符串查找"><a href="#KMP-与-KMP-字符串查找" class="headerlink" title="KMP 与 KMP 字符串查找"></a>KMP 与 KMP 字符串查找</h1><p><strong>strlen(S) 函数的时间复杂度为 $O(|S|)$</strong></p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int NR = 1e6;char s[NR + 10], t[NR + 10];int k[NR + 10];int p[NR + 10];int n, m;void kmp(char x[])&#123;    p[0] = p[1] = 0;    int len = strlen(x + 1);    for(int i = 2;i &lt;= len;i++)&#123;        int j = p[i - 1];        while(j != 0 &amp;&amp; x[j + 1] != x[i])&#123;            j = p[j];        &#125;        p[i] = x[j + 1] == x[i] ? j + 1 : 0;    &#125;    return ;&#125;void Find()&#123;    kmp(t);    k[0] = 0;    for(int i = 1;i &lt;= n;i++)&#123;        int j = k[i - 1];        while(j != 0 &amp;&amp; t[j + 1] != s[i])&#123;            j = p[j];        &#125;        k[i] = t[j + 1] == s[i] ? j + 1 : 0;        if(k[i] == m)&#123;            printf(&quot;%d\n&quot;, i - m + 1);            k[i] = p[k[i]];        &#125;    &#125;&#125;int main()&#123;    scanf(&quot;%s&quot;, s + 1);    scanf(&quot;%s&quot;, t + 1);    n = strlen(s + 1);    m = strlen(t + 1);    Find();    for(int i = 1;i &lt;= m;i++)&#123;        printf(&quot;%d &quot;, p[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/KMP%20%E4%B8%8E%20KMP%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>树状数组</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Mon, 10 Feb 2025 13:41:57 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;树状数组&quot;&gt;&lt;a href=&quot;#树状数组&quot; class=&quot;headerlink&quot; title=&quot;树状数组&quot;&gt;&lt;/a&gt;树状数组&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5e5</span>;</span><br><span class="line"><span class="type">int</span> c[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n, T;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = u;i &lt;= n;i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">c[i] += num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = r;i &gt;= <span class="number">1</span>;i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">ret += c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">add</span>(i, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> op, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">solve</span>(y) - <span class="built_in">solve</span>(x - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
