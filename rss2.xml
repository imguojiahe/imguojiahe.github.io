<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AceMetric 的博客</title>
    <link>https://imguojiahe.github.io/</link>
    
    <atom:link href="https://imguojiahe.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Face the fear, Build the future</description>
    <pubDate>Sat, 15 Mar 2025 11:15:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CF2061D 题解</title>
      <link>https://imguojiahe.github.io/2025/03/15/CF2061D_%E9%A2%98%E8%A7%A3/</link>
      <guid>https://imguojiahe.github.io/2025/03/15/CF2061D_%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Sat, 15 Mar 2025 11:08:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/article/v44y3a1n&quot;&gt;更好的阅读体验&lt;/a&gt;&lt;/p&gt;
&lt;h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.luogu.com.cn/article/v44y3a1n">更好的阅读体验</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>容易发现，如果合并后两个集合完全相等，那它们的总和要相等。如果正着考虑 $a$ 怎么能拼出来 $b$，可能会有多种情况。所以我们倒过来考虑 $b$ 能拆成哪些 $a$ 相加，容易发现一个 $b$ 按照题目中的规则只能拆成 $\lceil \frac{b}{2} \rceil$ 和 $\lfloor \frac{b}{2} \rfloor$，所以可以考虑广搜，如果拆到 $a$ 中有的就直接用掉。考虑剪枝，如果队列中的数多余 $n$ 或者队列中某个数小于 $a$ 中剩余最小的数，就不可能拆出来。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e5</span>;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">int</span> a[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> b[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="comment">// 多测要清空</span></span><br><span class="line">        mp.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            mp[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">            q.<span class="built_in">emplace</span>(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 广搜</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(q.<span class="built_in">size</span>() &gt; n)&#123;</span><br><span class="line">                <span class="comment">// 如果队列中的数多余 n, 就不可能拆出来</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">auto</span> top = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(mp.<span class="built_in">count</span>(top) &amp;&amp; mp[top])&#123;</span><br><span class="line">                <span class="comment">// 如果拆到 a 中有的就直接用掉</span></span><br><span class="line">                mp[top]--;</span><br><span class="line">                <span class="keyword">if</span>(mp[top] == <span class="number">0</span>) mp.<span class="built_in">erase</span>(top);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(top == <span class="number">1</span> || mp.<span class="built_in">begin</span>()-&gt;first &gt; top)&#123;</span><br><span class="line">                <span class="comment">// 队列中某个数小于 a 中剩余最小的数, 就不可能拆出来</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> nt1, nt2;</span><br><span class="line">            <span class="keyword">if</span>(top % <span class="number">2</span>) nt1 = (top - <span class="number">1</span>) / <span class="number">2</span>, nt2 = (top + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> nt1 =  top / <span class="number">2</span>, nt2 = top / <span class="number">2</span>;</span><br><span class="line">            q.<span class="built_in">emplace</span>(nt1);</span><br><span class="line">            q.<span class="built_in">emplace</span>(nt2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3%EF%BC%8CCodeForces%E9%A2%98%E7%9B%AE/">编程题解，CodeForces题目</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E9%A2%98%E8%A7%A3/">题解</category>
      
      
      <comments>https://imguojiahe.github.io/2025/03/15/CF2061D_%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>P9314 题解</title>
      <link>https://imguojiahe.github.io/2025/03/09/P9314_%E9%A2%98%E8%A7%A3/</link>
      <guid>https://imguojiahe.github.io/2025/03/09/P9314_%E9%A2%98%E8%A7%A3/</guid>
      <pubDate>Sun, 09 Mar 2025 02:53:47 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;模拟赛时限只有半秒，被卡常了（悲）。&lt;/p&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模拟赛时限只有半秒，被卡常了（悲）。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="简化题意"><a href="#简化题意" class="headerlink" title="简化题意"></a>简化题意</h3><p>长为 $s$ 的铁路 $AB$ 两端会有火车（可视为质点）发出，其中 $A$ 端共发出 $m$ 趟，第 $i$ 趟车发车时间为 $c_i$；$B$ 端共发出 $n$ 趟，第 $j$ 趟车发车时间为 $d_j$。铁路上有 $t$ 段隧道，第 $i$ 段隧道所在铁路上 $(a_i, b_i)$ 的区间内，若两辆列车在隧道内相遇就会相撞。求问是否相撞。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题数据范围很小，$n, m \in [0, 2 \times 10^3]$。可以直接枚举两边发出的列车，计算它们相遇的位置。</p><p>设 $c_i$ 与 $d_j$ 在 $p$ 处相遇，可得方程<br>$$<br>c_i + p &#x3D; d_j + s - p<br>$$<br>推得<br>$$<br>p &#x3D; \frac{d_j - c_i + s}{2}<br>$$<br>所以这两辆车就在 $\frac{d_i - c_i + s}{2}$ 处相遇（如果算出来是负数或者大于 $s$ 的话就不相遇）。</p><p>然后可以离散化隧道的位置和相遇的位置，用树状数组标记哪里有隧道，再查询相遇处是否在隧道内即可（也可以二分判断，常数小一些）。</p><p>注意 $p$ 可能是不是整数，可用 <code>double</code> 存或者直接乘 $2$，还有就是隧道的头和尾不算隧道内部。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>有点屎，将就着看吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">2e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> KR = <span class="number">5e6</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">// 隧道</span></span><br><span class="line">    LL l, r; <span class="comment">// 题目中的 a 和 b</span></span><br><span class="line">&#125;a[NR + <span class="number">10</span>];</span><br><span class="line">LL b[MR + <span class="number">10</span>]; <span class="comment">// 题目中的 c</span></span><br><span class="line">LL c[MR + <span class="number">10</span>]; <span class="comment">// 题目中的 d</span></span><br><span class="line">LL pos[MR + <span class="number">10</span>][MR + <span class="number">10</span>]; <span class="comment">// 相遇的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lsh[KR + <span class="number">10</span>]; <span class="comment">// 离散化</span></span><br><span class="line"><span class="type">int</span> d[KR + <span class="number">10</span>]; <span class="comment">// 树状数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x;i &gt;= <span class="number">1</span>;i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        ret += d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> del)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= cnt;i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        d[i] += del;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL s;</span><br><span class="line">    <span class="type">int</span> t, n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%d%d&quot;</span>, &amp;s, &amp;t, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].l);</span><br><span class="line">        a[i].l *= <span class="number">2</span>; <span class="comment">// 乘二避免小数</span></span><br><span class="line">        lsh[++lsh[<span class="number">0</span>]] = a[i].l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].r);</span><br><span class="line">        a[i].r *= <span class="number">2</span>;</span><br><span class="line">        lsh[++lsh[<span class="number">0</span>]] = a[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算相遇位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">            pos[i][j] = c[j] - b[i] + s;</span><br><span class="line">            <span class="keyword">if</span>(pos[i][j] &lt; <span class="number">0</span> || pos[i][j] &gt; s + s) pos[i][j] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> lsh[++lsh[<span class="number">0</span>]] = pos[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + lsh[<span class="number">0</span>]);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + lsh[<span class="number">0</span>]) - lsh;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)&#123;</span><br><span class="line">        a[i].l = <span class="built_in">lower_bound</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + cnt, a[i].l) - lsh + <span class="number">1</span>;</span><br><span class="line">        a[i].r = <span class="built_in">lower_bound</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + cnt, a[i].r) - lsh + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 标记是否有隧道</span></span><br><span class="line">        <span class="built_in">modify</span>(a[i].l + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">modify</span>(a[i].r, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos[i][j] != <span class="number">-1</span>)&#123;</span><br><span class="line">                pos[i][j] = <span class="built_in">lower_bound</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + cnt, pos[i][j]) - lsh + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 判断相遇点是否在隧道内</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">query</span>(pos[i][j]))&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98%E8%A7%A3%EF%BC%8C%E6%B4%9B%E8%B0%B7%E9%A2%98%E7%9B%AE/">编程题解，洛谷题目</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E9%A2%98%E8%A7%A3/">题解</category>
      
      
      <comments>https://imguojiahe.github.io/2025/03/09/P9314_%E9%A2%98%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>珂朵莉树 ODT</title>
      <link>https://imguojiahe.github.io/2025/03/08/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%20ODT/</link>
      <guid>https://imguojiahe.github.io/2025/03/08/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%20ODT/</guid>
      <pubDate>Sat, 08 Mar 2025 12:50:37 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;珂朵莉树-ODT&quot;&gt;&lt;a href=&quot;#珂朵莉树-ODT&quot; class=&quot;headerlink&quot; title=&quot;珂朵莉树 ODT&quot;&gt;&lt;/a&gt;珂朵莉树 ODT&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="珂朵莉树-ODT"><a href="#珂朵莉树-ODT" class="headerlink" title="珂朵莉树 ODT"></a>珂朵莉树 ODT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="keyword">mutable</span> LL v;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">0</span>, LL z = <span class="number">0</span>)&#123;</span><br><span class="line">        l = x;</span><br><span class="line">        r = y;</span><br><span class="line">        v = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;a) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; a.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL y, LL mod)</span></span>&#123;</span><br><span class="line">    x %= mod;</span><br><span class="line">    LL ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x % mod;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ODT</span>&#123;</span><br><span class="line">    set&lt;Node&gt; st;</span><br><span class="line">    <span class="keyword">using</span> ITER = set&lt;Node&gt;::iterator;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x)</span></span>&#123;</span><br><span class="line">        st.<span class="built_in">insert</span>(Node&#123;l, r, x&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ITER <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = st.<span class="built_in">lower_bound</span>(Node&#123;pos&#125;);</span><br><span class="line">        <span class="keyword">if</span>(it != st.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)&#123;</span><br><span class="line">            <span class="keyword">return</span> it;</span><br><span class="line">        &#125;</span><br><span class="line">        --it;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;r &lt; pos) <span class="keyword">return</span> st.<span class="built_in">end</span>();</span><br><span class="line">        <span class="keyword">auto</span> tmp = *it;</span><br><span class="line">        st.<span class="built_in">erase</span>(it);</span><br><span class="line">        st.<span class="built_in">insert</span>(Node&#123;tmp.l, pos - <span class="number">1</span>, tmp.v&#125;);</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">insert</span>(Node&#123;pos, tmp.r, tmp.v&#125;).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        st.<span class="built_in">erase</span>(itl, itr);</span><br><span class="line">        st.<span class="built_in">insert</span>(Node&#123;l, r, x&#125;);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = itl;it != itr;it++)&#123;</span><br><span class="line">            it-&gt;v += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">rank</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        vector&lt;pair&lt;LL, <span class="type">int</span>&gt; &gt; rk;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = itl;it != itr;it++)&#123;</span><br><span class="line">            rk.<span class="built_in">emplace_back</span>(it-&gt;v, it-&gt;r - it-&gt;l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(rk.<span class="built_in">begin</span>(), rk.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : rk)&#123;</span><br><span class="line">            k -= i.second;</span><br><span class="line">            <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) <span class="keyword">return</span> i.first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">psum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x, LL m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = itl;it != itr;it++)&#123;</span><br><span class="line">            ret = (ret + <span class="built_in">LL</span>(it-&gt;r - it-&gt;l + <span class="number">1ll</span>) * <span class="built_in">qpow</span>(it-&gt;v, x, m) % m) % m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://espresso.codeforces.com/70b3105d47df9b61a594a6a7c52f8d65e8ba2aa0.png" alt="img"></p>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/03/08/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%20ODT/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>多项式乘法 or FFT</title>
      <link>https://imguojiahe.github.io/2025/02/14/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%20or%20FFT/</link>
      <guid>https://imguojiahe.github.io/2025/02/14/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%20or%20FFT/</guid>
      <pubDate>Fri, 14 Feb 2025 07:57:15 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;多项式乘法-or-FFT&quot;&gt;&lt;a href=&quot;#多项式乘法-or-FFT&quot; class=&quot;headerlink&quot; title=&quot;多项式乘法 or FFT&quot;&gt;&lt;/a&gt;多项式乘法 or FFT&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;ta</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="多项式乘法-or-FFT"><a href="#多项式乘法-or-FFT" class="headerlink" title="多项式乘法 or FFT"></a>多项式乘法 or FFT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> LD = <span class="type">long</span> <span class="type">double</span>;</span><br><span class="line"><span class="type">const</span> LD PI = <span class="number">3.14159265358979323846</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5e4</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    rev.<span class="built_in">clear</span>();</span><br><span class="line">    rev.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            rev[i] |= n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> op, vector&lt;complex&lt;T&gt; &gt; &amp;v)</span></span>&#123;</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; rev[i])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(v[i], v[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">2</span>;len &lt;= n;len &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function">complex&lt;T&gt; <span class="title">W</span><span class="params">((T)cos((LD)<span class="number">2</span> * PI / len), (T)sin((LD)<span class="number">2</span> * op * PI / len))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>;l + len - <span class="number">1</span> &lt;= n;l += len)&#123;</span><br><span class="line">            <span class="type">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="function">complex&lt;T&gt; <span class="title">w</span><span class="params">((T)<span class="number">1</span>, (T)<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt; l + (len &gt;&gt; <span class="number">1</span>);i++)&#123;</span><br><span class="line">                complex&lt;T&gt; x = v[i] + w * v[i + (len &gt;&gt; <span class="number">1</span>)];</span><br><span class="line">                complex&lt;T&gt; y = v[i] - w * v[i + (len &gt;&gt; <span class="number">1</span>)];</span><br><span class="line">                v[i] = x;</span><br><span class="line">                v[i + (len &gt;&gt; <span class="number">1</span>)] = y;</span><br><span class="line">                w *= W;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mult</span><span class="params">(vector&lt;complex&lt;T&gt; &gt; &amp;v1, vector&lt;complex&lt;T&gt; &gt; &amp;v2)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = v1.<span class="built_in">size</span>() - <span class="number">1</span>, m = v2.<span class="built_in">size</span>() - <span class="number">1</span>, k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k &lt;= n + m) k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">change</span>(k);</span><br><span class="line">    <span class="built_in">FFT</span>(k, <span class="number">1</span>, v1);</span><br><span class="line">    <span class="built_in">FFT</span>(k, <span class="number">1</span>, v2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        v1[i] *= v2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FFT</span>(k, <span class="number">-1</span>, v1);</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/14/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%20or%20FFT/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>扩展卢卡斯定理 or exLucas</title>
      <link>https://imguojiahe.github.io/2025/02/13/%E6%89%A9%E5%B1%95%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%20or%20exLucas/</link>
      <guid>https://imguojiahe.github.io/2025/02/13/%E6%89%A9%E5%B1%95%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%20or%20exLucas/</guid>
      <pubDate>Thu, 13 Feb 2025 08:00:38 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;扩展卢卡斯定理-or-exLucas&quot;&gt;&lt;a href=&quot;#扩展卢卡斯定理-or-exLucas&quot; class=&quot;headerlink&quot; title=&quot;扩展卢卡斯定理 or exLucas&quot;&gt;&lt;/a&gt;扩展卢卡斯定理 or exLucas&lt;/h1&gt;&lt;figure c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="扩展卢卡斯定理-or-exLucas"><a href="#扩展卢卡斯定理-or-exLucas" class="headerlink" title="扩展卢卡斯定理 or exLucas"></a>扩展卢卡斯定理 or exLucas</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">exgcd</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pair&lt;T, T&gt; ret = <span class="built_in">exgcd</span>(b, a % b);</span><br><span class="line">    T tmp = ret.first;</span><br><span class="line">    ret.first = ret.second;</span><br><span class="line">    ret.second = tmp - (a / b) * ret.second;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">excrt</span><span class="params">(vector&lt;pair&lt;T, T&gt; &gt; &amp;conv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// x = conv[].second (mod conv[].first)</span></span><br><span class="line">    <span class="keyword">if</span>(conv.<span class="built_in">empty</span>()) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">    T m0 = conv.<span class="built_in">front</span>().first, a0 = conv.<span class="built_in">front</span>().second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; conv.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        T m = conv[i].first, a = conv[i].second;</span><br><span class="line">        pair&lt;T, T&gt; u = <span class="built_in">exgcd</span>(m0, m);</span><br><span class="line">        T d = __gcd(m0, m);</span><br><span class="line">        <span class="keyword">if</span>((a - a0) % d) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">        T m3 = m0 / d * m;</span><br><span class="line">        a0 = ((a * (m0 / d) % m3) * u.first % m3 + (a0 * (m / d) % m3) * u.second % m3 + m3) % m3;</span><br><span class="line">        m0 = m3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">qpow</span><span class="params">(T x, T y, T P)</span></span>&#123;</span><br><span class="line">    T ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x % P;</span><br><span class="line">        x = x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">inv</span><span class="params">(T x, T P)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 计算逆元</span></span><br><span class="line">    PLL ret = <span class="built_in">exgcd</span>(x, P);</span><br><span class="line">    <span class="keyword">return</span> (ret.first % P + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Fact</span><span class="params">(T x, T P, T Pp)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 x! mod Pp</span></span><br><span class="line"><span class="comment">    P 为质数, Pp 为 P 的幂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    T ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(T i = <span class="number">1</span>;i &lt;= Pp;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % P) ret = ret * i % Pp;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">qpow</span>(ret, x / Pp, Pp);</span><br><span class="line">    <span class="keyword">for</span>(T i = <span class="number">1</span>;i &lt;= x % Pp;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % P) ret = ret * i % Pp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret * <span class="built_in">Fact</span>(x / P, P, Pp) % Pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Ccal</span><span class="params">(T n, T m, T P, T Pp)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 C(n, m) mod Pp</span></span><br><span class="line"><span class="comment">    P 为质数, Pp 为 P 的幂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || m == <span class="number">0</span> || n == m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    T fn = <span class="built_in">Fact</span>(n, P, Pp), fm = <span class="built_in">Fact</span>(m, P, Pp), fk = <span class="built_in">Fact</span>(n - m, P, Pp);</span><br><span class="line">    T cnt = <span class="number">0</span>, tmp = n - m;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        n /= P;</span><br><span class="line">        cnt += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m)&#123;</span><br><span class="line">        m /= P;</span><br><span class="line">        cnt -= m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">        tmp /= P;</span><br><span class="line">        cnt -= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn * <span class="built_in">inv</span>(fm, Pp) % Pp * <span class="built_in">inv</span>(fk, Pp) % Pp * <span class="built_in">qpow</span>(P, cnt, Pp) % Pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">exlucas</span><span class="params">(T n, T m, T P)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 C(n, m) mod P</span></span><br><span class="line"><span class="comment">    P 为合数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;T&gt; p;</span><br><span class="line">    vector&lt;pair&lt;T, T&gt; &gt; v;</span><br><span class="line">    <span class="keyword">for</span>(T i = <span class="number">2</span>;i * i &lt;= P;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(P % i == <span class="number">0</span>)&#123;</span><br><span class="line">            p.<span class="built_in">emplace_back</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(P % i == <span class="number">0</span>)&#123;</span><br><span class="line">                P /= i;</span><br><span class="line">                p.<span class="built_in">back</span>() *= i;</span><br><span class="line">            &#125;</span><br><span class="line">            v.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(p.<span class="built_in">back</span>(), <span class="built_in">Ccal</span>(n, m, i, p.<span class="built_in">back</span>())));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(P &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        p.<span class="built_in">emplace_back</span>(P);</span><br><span class="line">        v.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(p.<span class="built_in">back</span>(), <span class="built_in">Ccal</span>(n, m, P, p.<span class="built_in">back</span>())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">excrt</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/13/%E6%89%A9%E5%B1%95%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%20or%20exLucas/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>扩展中国剩余定理 or exCRT</title>
      <link>https://imguojiahe.github.io/2025/02/13/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%20or%20exCRT/</link>
      <guid>https://imguojiahe.github.io/2025/02/13/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%20or%20exCRT/</guid>
      <pubDate>Thu, 13 Feb 2025 06:56:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;扩展中国剩余定理-or-exCRT&quot;&gt;&lt;a href=&quot;#扩展中国剩余定理-or-exCRT&quot; class=&quot;headerlink&quot; title=&quot;扩展中国剩余定理 or exCRT&quot;&gt;&lt;/a&gt;扩展中国剩余定理 or exCRT&lt;/h1&gt;&lt;figure class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="扩展中国剩余定理-or-exCRT"><a href="#扩展中国剩余定理-or-exCRT" class="headerlink" title="扩展中国剩余定理 or exCRT"></a>扩展中国剩余定理 or exCRT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">exgcd</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pair&lt;T, T&gt; ret = <span class="built_in">exgcd</span>(b, a % b);</span><br><span class="line">    T tmp = ret.first;</span><br><span class="line">    ret.first = ret.second;</span><br><span class="line">    ret.second = tmp - (a / b) * ret.second;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">excrt</span><span class="params">(vector&lt;pair&lt;T, T&gt; &gt; &amp;conv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// x = conv[].second (mod conv[].first)</span></span><br><span class="line">    <span class="keyword">if</span>(conv.<span class="built_in">empty</span>()) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">    T m0 = conv.<span class="built_in">front</span>().first, a0 = conv.<span class="built_in">front</span>().second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; conv.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        T m = conv[i].first, a = conv[i].second;</span><br><span class="line">        pair&lt;T, T&gt; u = <span class="built_in">exgcd</span>(m0, m);</span><br><span class="line">        T d = __gcd(m0, m);</span><br><span class="line">        <span class="keyword">if</span>((a - a0) % d) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">        T m3 = m0 / d * m;</span><br><span class="line">        a0 = ((a * (m0 / d) % m3) * u.first % m3 + (a0 * (m / d) % m3) * u.second % m3 + m3) % m3;</span><br><span class="line">        m0 = m3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/13/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%20or%20exCRT/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>欧拉筛 &amp; 求欧拉函数</title>
      <link>https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</link>
      <guid>https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Wed, 12 Feb 2025 08:29:36 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;欧拉筛-amp-求欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉筛-amp-求欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉筛 &amp;amp; 求欧拉函数&quot;&gt;&lt;/a&gt;欧拉筛 &amp;amp; 求欧拉函数&lt;/h1&gt;&lt;figure class=&quot;highlight </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="欧拉筛-amp-求欧拉函数"><a href="#欧拉筛-amp-求欧拉函数" class="headerlink" title="欧拉筛 &amp; 求欧拉函数"></a>欧拉筛 &amp; 求欧拉函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> LL NR = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">bool</span> is_prime[NR + <span class="number">10</span>];</span><br><span class="line">vector&lt;LL&gt; pri;</span><br><span class="line">LL phi[NR + <span class="number">10</span>];</span><br><span class="line">LL sp[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EulerSeive</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="built_in">sizeof</span>(is_prime));</span><br><span class="line">    is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>;i &lt;= x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime[i])&#123;</span><br><span class="line">            pri.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : pri)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1ll</span> * i * j &gt; <span class="number">1ll</span> * x) <span class="keyword">continue</span>;</span><br><span class="line">            is_prime[i * j] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                phi[i * j] = phi[i] * j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i * j] = phi[i] * phi[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>压位高精度</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/</guid>
      <pubDate>Mon, 10 Feb 2025 13:46:19 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;压位高精度&quot;&gt;&lt;a href=&quot;#压位高精度&quot; class=&quot;headerlink&quot; title=&quot;压位高精度&quot;&gt;&lt;/a&gt;压位高精度&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="压位高精度"><a href="#压位高精度" class="headerlink" title="压位高精度"></a>压位高精度</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PNR = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PL = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> LL PP = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hugeint</span>&#123;</span><br><span class="line">    LL x[PNR + <span class="number">10</span>];</span><br><span class="line">    <span class="built_in">Hugeint</span>()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="built_in">sizeof</span>(x));</span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">strtohi</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">strtohi</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        LL tmp = <span class="number">0</span>, mul = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line">            tmp += mul * <span class="number">1ll</span> * (s[len - i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            mul *= <span class="number">10ll</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % PL == <span class="number">0</span>)&#123;</span><br><span class="line">                x[++x[<span class="number">0</span>]] = tmp;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">                mul = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp) x[++x[<span class="number">0</span>]] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == x[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%08lld&quot;</span>, x[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> ==(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x[<span class="number">0</span>] != y.x[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x[i] != y.x[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> !=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x[<span class="number">0</span>] != y.x[<span class="number">0</span>]) <span class="keyword">return</span> x.x[<span class="number">0</span>] &lt; y.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x[i] != y.x[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> x.x[i] &lt; y.x[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y || x == y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt;= y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y || x == y;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> +(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        z.x[i] += x.x[i] + y.x[i];</span><br><span class="line">        z.x[i + <span class="number">1</span>] += z.x[i] / PP;</span><br><span class="line">        z.x[i] %= PP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> -(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        z.x[i] += x.x[i] - y.x[i];</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[i + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">            z.x[i] += PP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> *(Hugeint x, Hugeint y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= x.x[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= y.x[<span class="number">0</span>];j++)&#123;</span><br><span class="line">            z.x[i + j - <span class="number">1</span>] += x.x[i] * y.x[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    z.x[<span class="number">0</span>] = x.x[<span class="number">0</span>] + y.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= z.x[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        z.x[i + <span class="number">1</span>] += z.x[i] / PP;</span><br><span class="line">        z.x[i] %= PP;</span><br><span class="line">        <span class="keyword">if</span>(z.x[z.x[<span class="number">0</span>] + <span class="number">1</span>] &gt; <span class="number">0</span>) z.x[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(z.x[z.x[<span class="number">0</span>]] == <span class="number">0</span> &amp;&amp; z.x[<span class="number">0</span>] &gt; <span class="number">1</span>) z.x[<span class="number">0</span>]--;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> /(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> LL &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    z.x[<span class="number">0</span>] = x.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = z.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        z.x[i] </span><br><span class="line">        = z.x[i + <span class="number">1</span>] % y * PP + x.x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = z.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        z.x[i] /= y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(z.x[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; z.x[z.x[<span class="number">0</span>]] == <span class="number">0</span>) z.x[<span class="number">0</span>]--;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AC 自动机</title>
      <link>https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <pubDate>Mon, 10 Feb 2025 13:45:47 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;AC-自动机&quot;&gt;&lt;a href=&quot;#AC-自动机&quot; class=&quot;headerlink&quot; title=&quot;AC 自动机&quot;&gt;&lt;/a&gt;AC 自动机&lt;/h1&gt;&lt;p&gt;将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串&lt;/p&gt;
&lt;p&gt;失配标记：&lt;/p&gt;
&lt;f</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h1><p>将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串</p><p>失配标记：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">2e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">128</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> KR = <span class="number">2e6</span>;</span><br><span class="line">string t[NR + <span class="number">10</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> nxt[MR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> fail;</span><br><span class="line">&#125;tr[KR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> vis[KR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tmp].nxt[str[i - <span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">tr[tmp].nxt[str[i - <span class="number">1</span>]] = ++id;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tr[tmp].nxt[str[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tmp].nxt[str[i - <span class="number">1</span>]])&#123;</span><br><span class="line">tmp = tr[tmp].nxt[str[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vis[tmp];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[KR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildFail</span><span class="params">()</span></span>&#123;</span><br><span class="line">tr[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">128</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[<span class="number">0</span>].nxt[i])&#123;</span><br><span class="line">tr[tr[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">emplace</span>(tr[<span class="number">0</span>].nxt[i]);</span><br><span class="line">mp[<span class="number">0</span>].<span class="built_in">emplace_back</span>(tr[<span class="number">0</span>].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tr[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">128</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].nxt[i])&#123;</span><br><span class="line">tr[tr[u].nxt[i]].fail = tr[tr[u].fail].nxt[i];</span><br><span class="line">q.<span class="built_in">emplace</span>(tr[u].nxt[i]);</span><br><span class="line">mp[tr[tr[u].fail].nxt[i]].<span class="built_in">emplace_back</span>(tr[u].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tr[u].nxt[i] = tr[tr[u].fail].nxt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACauto</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">tmp = tr[tmp].nxt[s[i]];</span><br><span class="line">vis[tmp]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">vis[u] += vis[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cin&gt;&gt;t[i];</span><br><span class="line"><span class="built_in">insert</span>(t[i]);</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">buildFail</span>();</span><br><span class="line"><span class="built_in">ACauto</span>();</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(t[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>后缀数组 Suffix Array</title>
      <link>https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/</link>
      <guid>https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/</guid>
      <pubDate>Mon, 10 Feb 2025 13:45:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;后缀数组-Suffix-Array&quot;&gt;&lt;a href=&quot;#后缀数组-Suffix-Array&quot; class=&quot;headerlink&quot; title=&quot;后缀数组 Suffix Array&quot;&gt;&lt;/a&gt;后缀数组 Suffix Array&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;2024</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="后缀数组-Suffix-Array"><a href="#后缀数组-Suffix-Array" class="headerlink" title="后缀数组 Suffix Array"></a>后缀数组 Suffix Array</h1><ul><li>2024年12月10日</li></ul><p>利用<strong>倍增</strong>的思想求解字符串所有后缀按字典序排序后的顺序。</p><p>配有<strong>基数排序</strong>优化。</p><ol><li>无常数优化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">4e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="type">int</span> sa[NR + <span class="number">10</span>]; <span class="comment">// suffix array</span></span><br><span class="line"><span class="type">int</span> rk[NR + <span class="number">10</span>]; <span class="comment">// rank</span></span><br><span class="line"><span class="type">int</span> oldrk[NR + <span class="number">10</span>]; <span class="comment">// oldrk</span></span><br><span class="line"><span class="type">int</span> id[NR + <span class="number">10</span>]; <span class="comment">// old sa</span></span><br><span class="line"><span class="type">int</span> cnt[NR + <span class="number">10</span>]; <span class="comment">// base-sort&#x27;s counter</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">rk[i] = s[i];</span><br><span class="line">cnt[rk[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= MR;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[i]]] = i;</span><br><span class="line">cnt[rk[i]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//print(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n || i &lt;= MR;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]])&#123;</span><br><span class="line">rk[sa[i]] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">1</span>;w &lt; n;w &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">//printf(&quot;w=%d\n&quot;, w);</span></span><br><span class="line"><span class="comment">//print(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">id[i] = sa[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i] + w]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i] + w]]] = id[i];</span><br><span class="line">cnt[rk[id[i] + w]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">id[i] = sa[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i]]]] = id[i];</span><br><span class="line">cnt[rk[id[i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gen new rk</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + w &lt;= n &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= n &amp;&amp; oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]] &amp;&amp; oldrk[sa[i] + w] == oldrk[sa[i - <span class="number">1</span>] + w])&#123;</span><br><span class="line">rk[sa[i]] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>有常数优化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">4e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">128</span>;</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="type">int</span> sa[NR + <span class="number">10</span>]; <span class="comment">// suffix array</span></span><br><span class="line"><span class="type">int</span> rk[NR + <span class="number">10</span>]; <span class="comment">// rank</span></span><br><span class="line"><span class="type">int</span> oldrk[NR + <span class="number">10</span>]; <span class="comment">// oldrk</span></span><br><span class="line"><span class="type">int</span> id[NR + <span class="number">10</span>]; <span class="comment">// old sa</span></span><br><span class="line"><span class="type">int</span> cnt[NR + <span class="number">10</span>]; <span class="comment">// base-sort&#x27;s counter</span></span><br><span class="line"><span class="comment">// gennerate new rank</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gennewrk</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n || i &lt;= MR;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rkc = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = rkc;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + w &lt;= n &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= n &amp;&amp; oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]] &amp;&amp; oldrk[sa[i] + w] == oldrk[sa[i - <span class="number">1</span>] + w])&#123;</span><br><span class="line">rk[sa[i]] = rkc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++rkc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">rk[i] = s[i];</span><br><span class="line">cnt[rk[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= MR;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[i]]] = i;</span><br><span class="line">cnt[rk[i]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gennewrk</span>(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">1</span>;w &lt; n;w &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= n - w + <span class="number">1</span>;i--)&#123;</span><br><span class="line">id[++p] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] &gt; w) id[++p] = sa[i] - w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i]]]] = id[i];</span><br><span class="line">cnt[rk[id[i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gennewrk</span>(n, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/">洛谷剪贴板搬运</category>
      
      <category domain="https://imguojiahe.github.io/categories/%E6%B4%9B%E8%B0%B7%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%90%AC%E8%BF%90/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <category domain="https://imguojiahe.github.io/tags/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</category>
      
      
      <comments>https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
