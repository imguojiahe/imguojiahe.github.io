<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P9314 题解</title>
      <link href="/2025/03/09/P9314_%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/03/09/P9314_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模拟赛时限只有半秒，被卡常了（悲）。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="简化题意"><a href="#简化题意" class="headerlink" title="简化题意"></a>简化题意</h3><p>长为 $s$ 的铁路 $AB$ 两端会有火车（可视为质点）发出，其中 $A$ 端共发出 $m$ 趟，第 $i$ 趟车发车时间为 $c_i$；$B$ 端共发出 $n$ 趟，第 $j$ 趟车发车时间为 $d_j$。铁路上有 $t$ 段隧道，第 $i$ 段隧道所在铁路上 $(a_i, b_i)$ 的区间内，若两辆列车在隧道内相遇就会相撞。求问是否相撞。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题数据范围很小，$n, m \in [0, 2 \times 10^3]$。可以直接枚举两边发出的列车，计算它们相遇的位置。</p><p>设 $c_i$ 与 $d_j$ 在 $p$ 处相遇，可得方程<br>$$<br>c_i + p &#x3D; d_j + s - p<br>$$<br>推得<br>$$<br>p &#x3D; \frac{d_j - c_i + s}{2}<br>$$<br>所以这两辆车就在 $\frac{d_i - c_i + s}{2}$ 处相遇（如果算出来是负数或者大于 $s$ 的话就不相遇）。</p><p>然后可以离散化隧道的位置和相遇的位置，用树状数组标记哪里有隧道，再查询相遇处是否在隧道内即可（也可以二分判断，常数小一些）。</p><p>注意 $p$ 可能是不是整数，可用 <code>double</code> 存或者直接乘 $2$，还有就是隧道的头和尾不算隧道内部。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>有点屎，将就着看吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">2e3</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> KR = <span class="number">5e6</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">// 隧道</span></span><br><span class="line">    LL l, r; <span class="comment">// 题目中的 a 和 b</span></span><br><span class="line">&#125;a[NR + <span class="number">10</span>];</span><br><span class="line">LL b[MR + <span class="number">10</span>]; <span class="comment">// 题目中的 c</span></span><br><span class="line">LL c[MR + <span class="number">10</span>]; <span class="comment">// 题目中的 d</span></span><br><span class="line">LL pos[MR + <span class="number">10</span>][MR + <span class="number">10</span>]; <span class="comment">// 相遇的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lsh[KR + <span class="number">10</span>]; <span class="comment">// 离散化</span></span><br><span class="line"><span class="type">int</span> d[KR + <span class="number">10</span>]; <span class="comment">// 树状数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x;i &gt;= <span class="number">1</span>;i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        ret += d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> del)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x;i &lt;= cnt;i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        d[i] += del;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL s;</span><br><span class="line">    <span class="type">int</span> t, n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%d%d%d&quot;</span>, &amp;s, &amp;t, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].l);</span><br><span class="line">        a[i].l *= <span class="number">2</span>; <span class="comment">// 乘二避免小数</span></span><br><span class="line">        lsh[++lsh[<span class="number">0</span>]] = a[i].l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].r);</span><br><span class="line">        a[i].r *= <span class="number">2</span>;</span><br><span class="line">        lsh[++lsh[<span class="number">0</span>]] = a[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算相遇位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">            pos[i][j] = c[j] - b[i] + s;</span><br><span class="line">            <span class="keyword">if</span>(pos[i][j] &lt; <span class="number">0</span> || pos[i][j] &gt; s + s) pos[i][j] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> lsh[++lsh[<span class="number">0</span>]] = pos[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + lsh[<span class="number">0</span>]);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + lsh[<span class="number">0</span>]) - lsh;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)&#123;</span><br><span class="line">        a[i].l = <span class="built_in">lower_bound</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + cnt, a[i].l) - lsh + <span class="number">1</span>;</span><br><span class="line">        a[i].r = <span class="built_in">lower_bound</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + cnt, a[i].r) - lsh + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 标记是否有隧道</span></span><br><span class="line">        <span class="built_in">modify</span>(a[i].l + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">modify</span>(a[i].r, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos[i][j] != <span class="number">-1</span>)&#123;</span><br><span class="line">                pos[i][j] = <span class="built_in">lower_bound</span>(lsh + <span class="number">1</span>, lsh + <span class="number">1</span> + cnt, pos[i][j]) - lsh + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 判断相遇点是否在隧道内</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">query</span>(pos[i][j]))&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解，洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>珂朵莉树 ODT</title>
      <link href="/2025/03/08/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%20ODT/"/>
      <url>/2025/03/08/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%20ODT/</url>
      
        <content type="html"><![CDATA[<h1 id="珂朵莉树-ODT"><a href="#珂朵莉树-ODT" class="headerlink" title="珂朵莉树 ODT"></a>珂朵莉树 ODT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="keyword">mutable</span> LL v;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> x, <span class="type">int</span> y = <span class="number">0</span>, LL z = <span class="number">0</span>)&#123;</span><br><span class="line">        l = x;</span><br><span class="line">        r = y;</span><br><span class="line">        v = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;a) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; a.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL y, LL mod)</span></span>&#123;</span><br><span class="line">    x %= mod;</span><br><span class="line">    LL ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x % mod;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ODT</span>&#123;</span><br><span class="line">    set&lt;Node&gt; st;</span><br><span class="line">    <span class="keyword">using</span> ITER = set&lt;Node&gt;::iterator;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x)</span></span>&#123;</span><br><span class="line">        st.<span class="built_in">insert</span>(Node&#123;l, r, x&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ITER <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = st.<span class="built_in">lower_bound</span>(Node&#123;pos&#125;);</span><br><span class="line">        <span class="keyword">if</span>(it != st.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)&#123;</span><br><span class="line">            <span class="keyword">return</span> it;</span><br><span class="line">        &#125;</span><br><span class="line">        --it;</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;r &lt; pos) <span class="keyword">return</span> st.<span class="built_in">end</span>();</span><br><span class="line">        <span class="keyword">auto</span> tmp = *it;</span><br><span class="line">        st.<span class="built_in">erase</span>(it);</span><br><span class="line">        st.<span class="built_in">insert</span>(Node&#123;tmp.l, pos - <span class="number">1</span>, tmp.v&#125;);</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">insert</span>(Node&#123;pos, tmp.r, tmp.v&#125;).first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        st.<span class="built_in">erase</span>(itl, itr);</span><br><span class="line">        st.<span class="built_in">insert</span>(Node&#123;l, r, x&#125;);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = itl;it != itr;it++)&#123;</span><br><span class="line">            it-&gt;v += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">rank</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        vector&lt;pair&lt;LL, <span class="type">int</span>&gt; &gt; rk;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = itl;it != itr;it++)&#123;</span><br><span class="line">            rk.<span class="built_in">emplace_back</span>(it-&gt;v, it-&gt;r - it-&gt;l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(rk.<span class="built_in">begin</span>(), rk.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : rk)&#123;</span><br><span class="line">            k -= i.second;</span><br><span class="line">            <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) <span class="keyword">return</span> i.first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">psum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, LL x, LL m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> itr = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> itl = <span class="built_in">split</span>(l);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = itl;it != itr;it++)&#123;</span><br><span class="line">            ret = (ret + <span class="built_in">LL</span>(it-&gt;r - it-&gt;l + <span class="number">1ll</span>) * <span class="built_in">qpow</span>(it-&gt;v, x, m) % m) % m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://espresso.codeforces.com/70b3105d47df9b61a594a6a7c52f8d65e8ba2aa0.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式乘法 or FFT</title>
      <link href="/2025/02/14/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%20or%20FFT/"/>
      <url>/2025/02/14/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%20or%20FFT/</url>
      
        <content type="html"><![CDATA[<h1 id="多项式乘法-or-FFT"><a href="#多项式乘法-or-FFT" class="headerlink" title="多项式乘法 or FFT"></a>多项式乘法 or FFT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> LD = <span class="type">long</span> <span class="type">double</span>;</span><br><span class="line"><span class="type">const</span> LD PI = <span class="number">3.14159265358979323846</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5e4</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; rev;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    rev.<span class="built_in">clear</span>();</span><br><span class="line">    rev.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            rev[i] |= n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> op, vector&lt;complex&lt;T&gt; &gt; &amp;v)</span></span>&#123;</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; rev[i])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(v[i], v[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">2</span>;len &lt;= n;len &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function">complex&lt;T&gt; <span class="title">W</span><span class="params">((T)cos((LD)<span class="number">2</span> * PI / len), (T)sin((LD)<span class="number">2</span> * op * PI / len))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>;l + len - <span class="number">1</span> &lt;= n;l += len)&#123;</span><br><span class="line">            <span class="type">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="function">complex&lt;T&gt; <span class="title">w</span><span class="params">((T)<span class="number">1</span>, (T)<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt; l + (len &gt;&gt; <span class="number">1</span>);i++)&#123;</span><br><span class="line">                complex&lt;T&gt; x = v[i] + w * v[i + (len &gt;&gt; <span class="number">1</span>)];</span><br><span class="line">                complex&lt;T&gt; y = v[i] - w * v[i + (len &gt;&gt; <span class="number">1</span>)];</span><br><span class="line">                v[i] = x;</span><br><span class="line">                v[i + (len &gt;&gt; <span class="number">1</span>)] = y;</span><br><span class="line">                w *= W;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mult</span><span class="params">(vector&lt;complex&lt;T&gt; &gt; &amp;v1, vector&lt;complex&lt;T&gt; &gt; &amp;v2)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = v1.<span class="built_in">size</span>() - <span class="number">1</span>, m = v2.<span class="built_in">size</span>() - <span class="number">1</span>, k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k &lt;= n + m) k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">change</span>(k);</span><br><span class="line">    <span class="built_in">FFT</span>(k, <span class="number">1</span>, v1);</span><br><span class="line">    <span class="built_in">FFT</span>(k, <span class="number">1</span>, v2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">        v1[i] *= v2[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FFT</span>(k, <span class="number">-1</span>, v1);</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展卢卡斯定理 or exLucas</title>
      <link href="/2025/02/13/%E6%89%A9%E5%B1%95%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%20or%20exLucas/"/>
      <url>/2025/02/13/%E6%89%A9%E5%B1%95%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%20or%20exLucas/</url>
      
        <content type="html"><![CDATA[<h1 id="扩展卢卡斯定理-or-exLucas"><a href="#扩展卢卡斯定理-or-exLucas" class="headerlink" title="扩展卢卡斯定理 or exLucas"></a>扩展卢卡斯定理 or exLucas</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">exgcd</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pair&lt;T, T&gt; ret = <span class="built_in">exgcd</span>(b, a % b);</span><br><span class="line">    T tmp = ret.first;</span><br><span class="line">    ret.first = ret.second;</span><br><span class="line">    ret.second = tmp - (a / b) * ret.second;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">excrt</span><span class="params">(vector&lt;pair&lt;T, T&gt; &gt; &amp;conv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// x = conv[].second (mod conv[].first)</span></span><br><span class="line">    <span class="keyword">if</span>(conv.<span class="built_in">empty</span>()) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">    T m0 = conv.<span class="built_in">front</span>().first, a0 = conv.<span class="built_in">front</span>().second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; conv.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        T m = conv[i].first, a = conv[i].second;</span><br><span class="line">        pair&lt;T, T&gt; u = <span class="built_in">exgcd</span>(m0, m);</span><br><span class="line">        T d = __gcd(m0, m);</span><br><span class="line">        <span class="keyword">if</span>((a - a0) % d) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">        T m3 = m0 / d * m;</span><br><span class="line">        a0 = ((a * (m0 / d) % m3) * u.first % m3 + (a0 * (m / d) % m3) * u.second % m3 + m3) % m3;</span><br><span class="line">        m0 = m3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">qpow</span><span class="params">(T x, T y, T P)</span></span>&#123;</span><br><span class="line">    T ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x % P;</span><br><span class="line">        x = x * x % P;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">inv</span><span class="params">(T x, T P)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 计算逆元</span></span><br><span class="line">    PLL ret = <span class="built_in">exgcd</span>(x, P);</span><br><span class="line">    <span class="keyword">return</span> (ret.first % P + P) % P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Fact</span><span class="params">(T x, T P, T Pp)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 x! mod Pp</span></span><br><span class="line"><span class="comment">    P 为质数, Pp 为 P 的幂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    T ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(T i = <span class="number">1</span>;i &lt;= Pp;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % P) ret = ret * i % Pp;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">qpow</span>(ret, x / Pp, Pp);</span><br><span class="line">    <span class="keyword">for</span>(T i = <span class="number">1</span>;i &lt;= x % Pp;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % P) ret = ret * i % Pp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret * <span class="built_in">Fact</span>(x / P, P, Pp) % Pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Ccal</span><span class="params">(T n, T m, T P, T Pp)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 C(n, m) mod Pp</span></span><br><span class="line"><span class="comment">    P 为质数, Pp 为 P 的幂</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || m == <span class="number">0</span> || n == m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    T fn = <span class="built_in">Fact</span>(n, P, Pp), fm = <span class="built_in">Fact</span>(m, P, Pp), fk = <span class="built_in">Fact</span>(n - m, P, Pp);</span><br><span class="line">    T cnt = <span class="number">0</span>, tmp = n - m;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        n /= P;</span><br><span class="line">        cnt += n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m)&#123;</span><br><span class="line">        m /= P;</span><br><span class="line">        cnt -= m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">        tmp /= P;</span><br><span class="line">        cnt -= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn * <span class="built_in">inv</span>(fm, Pp) % Pp * <span class="built_in">inv</span>(fk, Pp) % Pp * <span class="built_in">qpow</span>(P, cnt, Pp) % Pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">exlucas</span><span class="params">(T n, T m, T P)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 C(n, m) mod P</span></span><br><span class="line"><span class="comment">    P 为合数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;T&gt; p;</span><br><span class="line">    vector&lt;pair&lt;T, T&gt; &gt; v;</span><br><span class="line">    <span class="keyword">for</span>(T i = <span class="number">2</span>;i * i &lt;= P;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(P % i == <span class="number">0</span>)&#123;</span><br><span class="line">            p.<span class="built_in">emplace_back</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(P % i == <span class="number">0</span>)&#123;</span><br><span class="line">                P /= i;</span><br><span class="line">                p.<span class="built_in">back</span>() *= i;</span><br><span class="line">            &#125;</span><br><span class="line">            v.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(p.<span class="built_in">back</span>(), <span class="built_in">Ccal</span>(n, m, i, p.<span class="built_in">back</span>())));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(P &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        p.<span class="built_in">emplace_back</span>(P);</span><br><span class="line">        v.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(p.<span class="built_in">back</span>(), <span class="built_in">Ccal</span>(n, m, P, p.<span class="built_in">back</span>())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">excrt</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展中国剩余定理 or exCRT</title>
      <link href="/2025/02/13/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%20or%20exCRT/"/>
      <url>/2025/02/13/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%20or%20exCRT/</url>
      
        <content type="html"><![CDATA[<h1 id="扩展中国剩余定理-or-exCRT"><a href="#扩展中国剩余定理-or-exCRT" class="headerlink" title="扩展中国剩余定理 or exCRT"></a>扩展中国剩余定理 or exCRT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">exgcd</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    pair&lt;T, T&gt; ret = <span class="built_in">exgcd</span>(b, a % b);</span><br><span class="line">    T tmp = ret.first;</span><br><span class="line">    ret.first = ret.second;</span><br><span class="line">    ret.second = tmp - (a / b) * ret.second;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">excrt</span><span class="params">(vector&lt;pair&lt;T, T&gt; &gt; &amp;conv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// x = conv[].second (mod conv[].first)</span></span><br><span class="line">    <span class="keyword">if</span>(conv.<span class="built_in">empty</span>()) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">    T m0 = conv.<span class="built_in">front</span>().first, a0 = conv.<span class="built_in">front</span>().second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; conv.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        T m = conv[i].first, a = conv[i].second;</span><br><span class="line">        pair&lt;T, T&gt; u = <span class="built_in">exgcd</span>(m0, m);</span><br><span class="line">        T d = __gcd(m0, m);</span><br><span class="line">        <span class="keyword">if</span>((a - a0) % d) <span class="keyword">return</span> (T)<span class="number">-1</span>;</span><br><span class="line">        T m3 = m0 / d * m;</span><br><span class="line">        a0 = ((a * (m0 / d) % m3) * u.first % m3 + (a0 * (m / d) % m3) * u.second % m3 + m3) % m3;</span><br><span class="line">        m0 = m3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉筛 &amp; 求欧拉函数</title>
      <link href="/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
      <url>/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&amp;%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="欧拉筛-amp-求欧拉函数"><a href="#欧拉筛-amp-求欧拉函数" class="headerlink" title="欧拉筛 &amp; 求欧拉函数"></a>欧拉筛 &amp; 求欧拉函数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> LL NR = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">bool</span> is_prime[NR + <span class="number">10</span>];</span><br><span class="line">vector&lt;LL&gt; pri;</span><br><span class="line">LL phi[NR + <span class="number">10</span>];</span><br><span class="line">LL sp[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EulerSeive</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(is_prime, <span class="literal">true</span>, <span class="built_in">sizeof</span>(is_prime));</span><br><span class="line">    is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>;i &lt;= x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime[i])&#123;</span><br><span class="line">            pri.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : pri)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1ll</span> * i * j &gt; <span class="number">1ll</span> * x) <span class="keyword">continue</span>;</span><br><span class="line">            is_prime[i * j] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                phi[i * j] = phi[i] * j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i * j] = phi[i] * phi[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压位高精度</title>
      <link href="/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
      <url>/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="压位高精度"><a href="#压位高精度" class="headerlink" title="压位高精度"></a>压位高精度</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PNR = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PL = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> LL PP = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Hugeint</span>&#123;</span><br><span class="line">    LL x[PNR + <span class="number">10</span>];</span><br><span class="line">    <span class="built_in">Hugeint</span>()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="built_in">sizeof</span>(x));</span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">strtohi</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">strtohi</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">        x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        LL tmp = <span class="number">0</span>, mul = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line">            tmp += mul * <span class="number">1ll</span> * (s[len - i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            mul *= <span class="number">10ll</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % PL == <span class="number">0</span>)&#123;</span><br><span class="line">                x[++x[<span class="number">0</span>]] = tmp;</span><br><span class="line">                tmp = <span class="number">0</span>;</span><br><span class="line">                mul = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp) x[++x[<span class="number">0</span>]] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == x[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, x[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%08lld&quot;</span>, x[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> ==(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x[<span class="number">0</span>] != y.x[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x[i] != y.x[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> !=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.x[<span class="number">0</span>] != y.x[<span class="number">0</span>]) <span class="keyword">return</span> x.x[<span class="number">0</span>] &lt; y.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.x[i] != y.x[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> x.x[i] &lt; y.x[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y || x == y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x &lt;= y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;=(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y || x == y;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> +(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        z.x[i] += x.x[i] + y.x[i];</span><br><span class="line">        z.x[i + <span class="number">1</span>] += z.x[i] / PP;</span><br><span class="line">        z.x[i] %= PP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> -(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> Hugeint &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        z.x[i] += x.x[i] - y.x[i];</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[i + <span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">            z.x[i] += PP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(x.x[<span class="number">0</span>], y.x[<span class="number">0</span>]) + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(z.x[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            z.x[<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> *(Hugeint x, Hugeint y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= x.x[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= y.x[<span class="number">0</span>];j++)&#123;</span><br><span class="line">            z.x[i + j - <span class="number">1</span>] += x.x[i] * y.x[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    z.x[<span class="number">0</span>] = x.x[<span class="number">0</span>] + y.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= z.x[<span class="number">0</span>];i++)&#123;</span><br><span class="line">        z.x[i + <span class="number">1</span>] += z.x[i] / PP;</span><br><span class="line">        z.x[i] %= PP;</span><br><span class="line">        <span class="keyword">if</span>(z.x[z.x[<span class="number">0</span>] + <span class="number">1</span>] &gt; <span class="number">0</span>) z.x[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(z.x[z.x[<span class="number">0</span>]] == <span class="number">0</span> &amp;&amp; z.x[<span class="number">0</span>] &gt; <span class="number">1</span>) z.x[<span class="number">0</span>]--;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">Hugeint <span class="keyword">operator</span> /(<span class="type">const</span> Hugeint &amp;x, <span class="type">const</span> LL &amp;y)&#123;</span><br><span class="line">    Hugeint z;</span><br><span class="line">    z.x[<span class="number">0</span>] = x.x[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = z.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        z.x[i] </span><br><span class="line">        = z.x[i + <span class="number">1</span>] % y * PP + x.x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = z.x[<span class="number">0</span>];i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">        z.x[i] /= y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(z.x[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; z.x[z.x[<span class="number">0</span>]] == <span class="number">0</span>) z.x[<span class="number">0</span>]--;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AC 自动机</title>
      <link href="/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="AC-自动机"><a href="#AC-自动机" class="headerlink" title="AC 自动机"></a>AC 自动机</h1><p>将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串</p><p>失配标记：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">2e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">128</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> KR = <span class="number">2e6</span>;</span><br><span class="line">string t[NR + <span class="number">10</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> nxt[MR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> fail;</span><br><span class="line">&#125;tr[KR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> vis[KR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tmp].nxt[str[i - <span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">tr[tmp].nxt[str[i - <span class="number">1</span>]] = ++id;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tr[tmp].nxt[str[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string &amp;str)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tmp].nxt[str[i - <span class="number">1</span>]])&#123;</span><br><span class="line">tmp = tr[tmp].nxt[str[i - <span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vis[tmp];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[KR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildFail</span><span class="params">()</span></span>&#123;</span><br><span class="line">tr[<span class="number">0</span>].fail = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">128</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[<span class="number">0</span>].nxt[i])&#123;</span><br><span class="line">tr[tr[<span class="number">0</span>].nxt[i]].fail = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">emplace</span>(tr[<span class="number">0</span>].nxt[i]);</span><br><span class="line">mp[<span class="number">0</span>].<span class="built_in">emplace_back</span>(tr[<span class="number">0</span>].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tr[<span class="number">0</span>].nxt[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">128</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].nxt[i])&#123;</span><br><span class="line">tr[tr[u].nxt[i]].fail = tr[tr[u].fail].nxt[i];</span><br><span class="line">q.<span class="built_in">emplace</span>(tr[u].nxt[i]);</span><br><span class="line">mp[tr[tr[u].fail].nxt[i]].<span class="built_in">emplace_back</span>(tr[u].nxt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tr[u].nxt[i] = tr[tr[u].fail].nxt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ACauto</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">tmp = tr[tmp].nxt[s[i]];</span><br><span class="line">vis[tmp]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">vis[u] += vis[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cin&gt;&gt;t[i];</span><br><span class="line"><span class="built_in">insert</span>(t[i]);</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="built_in">buildFail</span>();</span><br><span class="line"><span class="built_in">ACauto</span>();</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(t[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组 Suffix Array</title>
      <link href="/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/"/>
      <url>/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/</url>
      
        <content type="html"><![CDATA[<h1 id="后缀数组-Suffix-Array"><a href="#后缀数组-Suffix-Array" class="headerlink" title="后缀数组 Suffix Array"></a>后缀数组 Suffix Array</h1><ul><li>2024年12月10日</li></ul><p>利用<strong>倍增</strong>的思想求解字符串所有后缀按字典序排序后的顺序。</p><p>配有<strong>基数排序</strong>优化。</p><ol><li>无常数优化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">4e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="type">int</span> sa[NR + <span class="number">10</span>]; <span class="comment">// suffix array</span></span><br><span class="line"><span class="type">int</span> rk[NR + <span class="number">10</span>]; <span class="comment">// rank</span></span><br><span class="line"><span class="type">int</span> oldrk[NR + <span class="number">10</span>]; <span class="comment">// oldrk</span></span><br><span class="line"><span class="type">int</span> id[NR + <span class="number">10</span>]; <span class="comment">// old sa</span></span><br><span class="line"><span class="type">int</span> cnt[NR + <span class="number">10</span>]; <span class="comment">// base-sort&#x27;s counter</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">rk[i] = s[i];</span><br><span class="line">cnt[rk[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= MR;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[i]]] = i;</span><br><span class="line">cnt[rk[i]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//print(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n || i &lt;= MR;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]])&#123;</span><br><span class="line">rk[sa[i]] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">1</span>;w &lt; n;w &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">//printf(&quot;w=%d\n&quot;, w);</span></span><br><span class="line"><span class="comment">//print(n);</span></span><br><span class="line"><span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">id[i] = sa[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i] + w]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i] + w]]] = id[i];</span><br><span class="line">cnt[rk[id[i] + w]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">id[i] = sa[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i]]]] = id[i];</span><br><span class="line">cnt[rk[id[i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gen new rk</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + w &lt;= n &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= n &amp;&amp; oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]] &amp;&amp; oldrk[sa[i] + w] == oldrk[sa[i - <span class="number">1</span>] + w])&#123;</span><br><span class="line">rk[sa[i]] = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>有常数优化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">4e6</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">128</span>;</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>]; <span class="comment">// string</span></span><br><span class="line"><span class="type">int</span> sa[NR + <span class="number">10</span>]; <span class="comment">// suffix array</span></span><br><span class="line"><span class="type">int</span> rk[NR + <span class="number">10</span>]; <span class="comment">// rank</span></span><br><span class="line"><span class="type">int</span> oldrk[NR + <span class="number">10</span>]; <span class="comment">// oldrk</span></span><br><span class="line"><span class="type">int</span> id[NR + <span class="number">10</span>]; <span class="comment">// old sa</span></span><br><span class="line"><span class="type">int</span> cnt[NR + <span class="number">10</span>]; <span class="comment">// base-sort&#x27;s counter</span></span><br><span class="line"><span class="comment">// gennerate new rank</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gennewrk</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n || i &lt;= MR;i++)&#123;</span><br><span class="line">oldrk[i] = rk[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rkc = <span class="number">1</span>;</span><br><span class="line">rk[sa[<span class="number">1</span>]] = rkc;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] + w &lt;= n &amp;&amp; sa[i - <span class="number">1</span>] + w &lt;= n &amp;&amp; oldrk[sa[i]] == oldrk[sa[i - <span class="number">1</span>]] &amp;&amp; oldrk[sa[i] + w] == oldrk[sa[i - <span class="number">1</span>] + w])&#123;</span><br><span class="line">rk[sa[i]] = rkc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rk[sa[i]] = ++rkc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">rk[i] = s[i];</span><br><span class="line">cnt[rk[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= MR;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[i]]] = i;</span><br><span class="line">cnt[rk[i]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gennewrk</span>(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">1</span>;w &lt; n;w &lt;&lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= n - w + <span class="number">1</span>;i--)&#123;</span><br><span class="line">id[++p] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] &gt; w) id[++p] = sa[i] - w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[rk[id[i]]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)&#123;</span><br><span class="line">sa[cnt[rk[id[i]]]] = id[i];</span><br><span class="line">cnt[rk[id[i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">gennewrk</span>(n, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分（树剖）</title>
      <link href="/2025/02/10/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%EF%BC%88%E6%A0%91%E5%89%96%EF%BC%89/"/>
      <url>/2025/02/10/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%EF%BC%88%E6%A0%91%E5%89%96%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="树链剖分（树剖）"><a href="#树链剖分（树剖）" class="headerlink" title="树链剖分（树剖）"></a>树链剖分（树剖）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>针对树上路径操作的一类算法思想</p><p>将树划分成若干条链，将路径操作转化为若干链上的区间操作</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> leftson u &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rightson (u &lt;&lt; 1) + 1</span></span><br><span class="line"><span class="type">const</span> LL NR = <span class="number">1e5</span>;</span><br><span class="line">LL P;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span> * NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> sz[NR + <span class="number">10</span>], fa[NR + <span class="number">10</span>], dep[NR + <span class="number">10</span>], hson[NR + <span class="number">10</span>], top[NR + <span class="number">10</span>], seq[NR + <span class="number">10</span>], dfn[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//                            深度          重儿子        重链的链首     dfs序编号</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//线段树</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    LL sum, add;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segtree</span>&#123;</span><br><span class="line">    Node tr[<span class="number">4</span> * NR + <span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> n, root;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        tr[u].sum = tr[leftson].sum + tr[rightson].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].add)&#123;</span><br><span class="line">            tr[leftson].add += tr[u].add;</span><br><span class="line">            tr[leftson].sum += (tr[leftson].r - tr[leftson].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">            tr[rightson].add += tr[u].add;</span><br><span class="line">            tr[rightson].sum += (tr[rightson].r - tr[rightson].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">            tr[u].add = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, LL d)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r)&#123;</span><br><span class="line">            tr[u].sum += (tr[u].r - tr[u].l + <span class="number">1</span>) * d;</span><br><span class="line">            tr[u].add += d;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        LL mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(leftson, l, r, d);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) <span class="built_in">modify</span>(rightson, l, r, d);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        LL mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) ret += <span class="built_in">query</span>(leftson, l, r);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) ret += <span class="built_in">query</span>(rightson, l, r);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            tr[u] = Node&#123;l, r, a[arr[l]], <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u].l = l;</span><br><span class="line">        tr[u].r = r;</span><br><span class="line">        LL mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(leftson, l, mid, arr);</span><br><span class="line">        <span class="built_in">build</span>(rightson, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segtree seg;</span><br><span class="line"><span class="comment">//树剖初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father, <span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">sz[u] = <span class="number">1</span>, fa[u] = father, dep[u] = d, hson[u] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u]) <span class="keyword">if</span>(v != fa[u])&#123;</span><br><span class="line"><span class="built_in">dfs_init</span>(v, u, d + <span class="number">1</span>);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(hson[u] == <span class="number">-1</span> || sz[hson[u]] &lt; sz[v]) hson[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树链剖分</span></span><br><span class="line">LL dfsid = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_divide</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">top[u] = t;</span><br><span class="line">dfn[u] = ++dfsid;</span><br><span class="line">seq[dfsid] = u;</span><br><span class="line"><span class="keyword">if</span>(hson[u] == <span class="number">-1</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">dfs_divide</span>(hson[u], t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : mp[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != hson[u])&#123;</span><br><span class="line"><span class="built_in">dfs_divide</span>(v, v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树剖 × 线段树 修改路径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, LL add)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">seg.<span class="built_in">modify</span>(<span class="number">1</span>, dfn[top[x]], dfn[x], add);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line">seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">min</span>(dfn[x], dfn[y]), <span class="built_in">max</span>(dfn[x], dfn[y]), add);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//树剖 × 线段树 查询路径</span></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">LL ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">ret += seg.<span class="built_in">query</span>(<span class="number">1</span>, dfn[top[x]], dfn[x]);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line">ret += seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="built_in">min</span>(dfn[x], dfn[y]), <span class="built_in">max</span>(dfn[x], dfn[y]));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, T, rt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%lld&quot;</span>, &amp;n, &amp;T, &amp;rt, &amp;P);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">mp[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">mp[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//开始树剖</span></span><br><span class="line"><span class="built_in">dfs_init</span>(rt, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dfsid = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs_divide</span>(rt, rt);</span><br><span class="line">   <span class="comment">//建树</span></span><br><span class="line">seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, seq);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">LL op, x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;  <span class="comment">//将树从 x 到 y 结点最短路径上所有节点的值都加上 z</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line"><span class="built_in">modify</span>(x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;  <span class="comment">//求树从 x 到 y 结点最短路径上所有节点的值之和</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(x, y) % P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;  <span class="comment">//将以 x 为根节点的子树内所有节点值都加上 z</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;z);</span><br><span class="line">seg.<span class="built_in">modify</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)&#123;  <span class="comment">//求以 x 为根节点的子树内所有节点值之和</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, seg.<span class="built_in">query</span>(<span class="number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="number">1</span>) % P);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manacher</title>
      <link href="/2025/02/10/manacher/"/>
      <url>/2025/02/10/manacher/</url>
      
        <content type="html"><![CDATA[<h1 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h1><p>求字符串中最长的回文串。</p><p>不妨设串长为奇，令 $d_i$ 表示 以 $S_i$ 为中心的最大回文半径。</p><p><code>P</code> &amp; <code>maxr</code>: 目前找到的最靠右的起点 &amp; 终点</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int NR = 1.1e7;char s[2 * NR + 10];int d[2 * NR + 10];int input()&#123;    string str;    cin&gt;&gt;str;    int len = 0;    s[++len] = &#39;#&#39;;    for(auto i : str)&#123;        s[++len] = i;        s[++len] = &#39;#&#39;;    &#125;    return len;&#125;void Manacher(int len)&#123;    for(int i = 1;i &lt;= len;i++)&#123;        d[i] = 1;    &#125;    int p = 0, maxr = 0;    for(int i = 2;i &lt;= len;i++)&#123;        if(i &lt;= maxr)&#123;            d[i] = min(d[p + maxr - i], maxr - i + 1);        &#125;        while((i + d[i] &lt;= len &amp;&amp; i - d[i] &gt; 0) &amp;&amp; s[i - d[i]] == s[i + d[i]])&#123;            d[i]++;        &#125;        if(i + d[i] - 1 &gt; maxr)&#123;            p = i - d[i] + 1;            maxr = i + d[i] - 1;        &#125;    &#125;    return ;&#125;int main()&#123;    int len = input();//printf(&quot;%d\n%s\n&quot;, len, s + 1);    Manacher(len);    int Max = 0;    for(int i = 1;i &lt;= len;i++)&#123;//printf(&quot;%d &quot;, d[i]);        Max = max(Max, i % 2 ? (d[i] / 2) * 2 : (d[i] / 2) * 2 - 1);    &#125;//printf(&quot;\n&quot;);    printf(&quot;%d\n&quot;, Max);    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓展 KMP (exKMP)</title>
      <link href="/2025/02/10/%E6%8B%93%E5%B1%95%20KMP%20or%20exKMP/"/>
      <url>/2025/02/10/%E6%8B%93%E5%B1%95%20KMP%20or%20exKMP/</url>
      
        <content type="html"><![CDATA[<h1 id="拓展-KMP-exKMP"><a href="#拓展-KMP-exKMP" class="headerlink" title="拓展 KMP  (exKMP)"></a>拓展 KMP  (exKMP)</h1><p>ZA: 自己所有后缀与字符串自己的最长公共前缀</p><p>exKMP: <code>t</code> 所有后缀与 <code>s</code> 的最长公共前缀</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longconst int NR = 2e7;char s[NR + 10];char t[NR + 10];int z[NR + 10];int d[NR + 10];void ZA(int len)&#123;    memset(z, 0, sizeof(z));    z[1] = len;    int p = 0, maxr = 0;    for(int i = 2;i &lt;= len;i++)&#123;        if(i &lt;= maxr)&#123;            z[i] = min(z[i - p + 1], maxr - i + 1);        &#125;        while(i + z[i] &lt;= len &amp;&amp; s[1 + z[i]] == s[i + z[i]])&#123;            z[i]++;        &#125;        if(i + z[i] - 1 &gt; maxr)&#123;            p = i;            maxr = i + z[i] - 1;        &#125;    &#125;    return ;&#125;void exKMP(int len1, int len2)&#123;    memset(d, 0, sizeof(d));    int p = 0, maxr = 0;    for(int i = 1;i &lt;= len2;i++)&#123;        if(i &lt;= maxr)&#123;            d[i] = min(z[i - p + 1], maxr - i + 1);        &#125;        while(1 + d[i] &lt;= len1 &amp;&amp; i + d[i] &lt;= len2 &amp;&amp; s[1 + d[i]] == t[i + d[i]])&#123;            d[i]++;        &#125;        if(i + d[i] - 1 &gt; maxr)&#123;            p = i;            maxr = i + d[i] - 1;        &#125;    &#125;    return ;&#125;int main()&#123;//freopen(&quot;P5410_1.in&quot;, &quot;r&quot;, stdin);    scanf(&quot;%s&quot;, t + 1);    scanf(&quot;%s&quot;, s + 1);    int len = strlen(s + 1);    ZA(len);    LL ans = 0;    for(int i = 1;i &lt;= len;i++)&#123;//printf(&quot;%d &quot;, z[i]);        ans ^= 1ll * i * (z[i] + 1);    &#125;//printf(&quot;\n&quot;);    printf(&quot;%lld\n&quot;, ans);    int len2 = strlen(t + 1);     exKMP(len, len2);    ans = 0;    for(int i = 1;i &lt;= len2;i++)&#123;//printf(&quot;%d &quot;, z[i]);        ans ^= 1ll * i * (d[i] + 1);    &#125;    printf(&quot;%lld\n&quot;, ans);    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP 与 KMP 字符串查找</title>
      <link href="/2025/02/10/KMP%20%E4%B8%8E%20KMP%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/"/>
      <url>/2025/02/10/KMP%20%E4%B8%8E%20KMP%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP-与-KMP-字符串查找"><a href="#KMP-与-KMP-字符串查找" class="headerlink" title="KMP 与 KMP 字符串查找"></a>KMP 与 KMP 字符串查找</h1><p><strong>strlen(S) 函数的时间复杂度为 $O(|S|)$</strong></p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int NR = 1e6;char s[NR + 10], t[NR + 10];int k[NR + 10];int p[NR + 10];int n, m;void kmp(char x[])&#123;    p[0] = p[1] = 0;    int len = strlen(x + 1);    for(int i = 2;i &lt;= len;i++)&#123;        int j = p[i - 1];        while(j != 0 &amp;&amp; x[j + 1] != x[i])&#123;            j = p[j];        &#125;        p[i] = x[j + 1] == x[i] ? j + 1 : 0;    &#125;    return ;&#125;void Find()&#123;    kmp(t);    k[0] = 0;    for(int i = 1;i &lt;= n;i++)&#123;        int j = k[i - 1];        while(j != 0 &amp;&amp; t[j + 1] != s[i])&#123;            j = p[j];        &#125;        k[i] = t[j + 1] == s[i] ? j + 1 : 0;        if(k[i] == m)&#123;            printf(&quot;%d\n&quot;, i - m + 1);            k[i] = p[k[i]];        &#125;    &#125;&#125;int main()&#123;    scanf(&quot;%s&quot;, s + 1);    scanf(&quot;%s&quot;, t + 1);    n = strlen(s + 1);    m = strlen(t + 1);    Find();    for(int i = 1;i &lt;= m;i++)&#123;        printf(&quot;%d &quot;, p[i]);    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2025/02/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2025/02/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5e5</span>;</span><br><span class="line"><span class="type">int</span> c[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n, T;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = u;i &lt;= n;i += <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">c[i] += num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = r;i &gt;= <span class="number">1</span>;i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">ret += c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">add</span>(i, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> op, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">solve</span>(y) - <span class="built_in">solve</span>(x - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2025/02/10/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2025/02/10/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="标记下沉"><a href="#标记下沉" class="headerlink" title="标记下沉"></a>标记下沉</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> leftson u &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rightson (u &lt;&lt; 1) + 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e5</span>;</span><br><span class="line">LL a[<span class="number">4</span> * NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//Node的本意是节点</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    LL sum, add;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segtree</span>&#123;</span><br><span class="line">    Node tr[<span class="number">4</span> * NR + <span class="number">10</span>];<span class="comment">//节点所代表的区间的和</span></span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//数组长度</span></span><br><span class="line">    <span class="type">int</span> root;<span class="comment">//根节点</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    更新节点u的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        tr[u].sum = tr[leftson].sum + tr[rightson].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将u的懒标记下放到儿子节点中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[u].add)&#123;</span><br><span class="line">            <span class="comment">//下放懒标记到左儿子</span></span><br><span class="line">            tr[leftson].add += tr[u].add;</span><br><span class="line">            <span class="comment">//重新计算左儿子在懒标记下放后的值</span></span><br><span class="line">            tr[leftson].sum += (LL)(tr[leftson].r - tr[leftson].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">            <span class="comment">//下放懒标记到右儿子</span></span><br><span class="line">            tr[rightson].add += tr[u].add;</span><br><span class="line">            <span class="comment">//重新计算右儿子在懒标记下放后的值</span></span><br><span class="line">            tr[rightson].sum += (LL)(tr[rightson].r - tr[rightson].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">            tr[u].add = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    加区间</span></span><br><span class="line"><span class="comment">    (l, r)为整个需要修改的区间  u, d为要加的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">        <span class="comment">//该节点整个在要改的区间内</span></span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r)&#123;</span><br><span class="line">            <span class="comment">//更改节点的和</span></span><br><span class="line">            tr[u].sum += (LL)(tr[u].r - tr[u].l + <span class="number">1</span>) * d;</span><br><span class="line">            <span class="comment">//直接下放懒标记</span></span><br><span class="line">            tr[u].add += d;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该节点不全在要改的区间内</span></span><br><span class="line">        <span class="comment">//下放懒标记</span></span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//左儿子在要改区间内</span></span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(leftson, l, r, d);</span><br><span class="line">        <span class="comment">//右儿子在要改区间内</span></span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) <span class="built_in">modify</span>(rightson, l, r, d);</span><br><span class="line">        <span class="comment">//更新当前节点的值</span></span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    区间求和</span></span><br><span class="line"><span class="comment">    (l, r)为整个需要求和的区间  u为这个区间中包含的一个节点</span></span><br><span class="line"><span class="comment">    只考虑当前节点和所有子节点的懒标记</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//该节点整个在要求的区间内</span></span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r)&#123;</span><br><span class="line">            <span class="comment">//直接返回</span></span><br><span class="line">            <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//该节点不全在要求的区间内</span></span><br><span class="line">        <span class="comment">//下放懒标记</span></span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">        LL ret = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//左儿子在要求区间内</span></span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) ret += <span class="built_in">query</span>(leftson, l, r);</span><br><span class="line">        <span class="comment">//右儿子在要求区间内</span></span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) ret += <span class="built_in">query</span>(rightson, l, r);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    建树</span></span><br><span class="line"><span class="comment">    (l, r)为读入数组中要建树的区间, u为要建树的节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//此节点要建树的区间长度为1</span></span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            <span class="comment">//直接为此节点赋值</span></span><br><span class="line">            tr[u] = Node&#123;l, r, a[l], <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u].l = l;</span><br><span class="line">        tr[u].r = r;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//左子节点建树</span></span><br><span class="line">        <span class="built_in">build</span>(leftson, l, mid);</span><br><span class="line">        <span class="comment">//右子节点建树</span></span><br><span class="line">        <span class="built_in">build</span>(rightson, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="comment">//更新当前节点的值</span></span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segtree seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> op, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> d;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">            seg.<span class="built_in">modify</span>(<span class="number">1</span>, l, r, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, seg.<span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标记永久化"><a href="#标记永久化" class="headerlink" title="标记永久化"></a>标记永久化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">int</span> sum, add;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Segtree</span>&#123;</span><br><span class="line">Node tr[<span class="number">4</span> * NR  + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">tr[u].sum = tr[<span class="number">2</span> * u].sum + tr[<span class="number">2</span> * u + <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> arr[])</span></span>&#123;</span><br><span class="line">tr[u].l = l;</span><br><span class="line">tr[u].r = r;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">tr[u].sum = arr[u];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span> * u, l, mid, arr);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">2</span> * u + <span class="number">1</span>, mid + <span class="number">1</span>, r, arr);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//节点区间, 修改区间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> add)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l == s &amp;&amp; tr[u].r == t)&#123;</span><br><span class="line">tr[u].add += add;</span><br><span class="line">tr[u].sum += (tr[u].r - tr[u].l + <span class="number">1</span>) * add;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s &gt;= tr[u].l &amp;&amp; s &lt;= mid &amp;&amp; t &gt;= tr[u].l &amp;&amp; t &lt;= mid)&#123;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">2</span> * u, s, t, add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s &gt;= mid + <span class="number">1</span> &amp;&amp; s &lt;= tr[u].r &amp;&amp; t &gt;= mid + <span class="number">1</span> &amp;&amp; t &lt;= tr[u].r)&#123;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">2</span> * u + <span class="number">1</span>, s, t, add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">2</span> * u, s, mid, add);</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">2</span> * u + <span class="number">1</span>, mid + <span class="number">1</span>, t, add);</span><br><span class="line">&#125;</span><br><span class="line">tr[u].sum += (t - s + <span class="number">1</span>) * add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> add)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l == s &amp;&amp; tr[u].r == t)&#123;</span><br><span class="line"><span class="keyword">return</span> tr[u].sum + (tr[u].r - tr[u].l + <span class="number">1</span>) * tr[u].add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(s &gt;= tr[u].l &amp;&amp; s &lt;= mid &amp;&amp; t &gt;= tr[u].l &amp;&amp; t &lt;= mid)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">2</span> * u, s, t, add + tr[u].add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s &gt;= mid + <span class="number">1</span> &amp;&amp; s &lt;= tr[u].r &amp;&amp; t &gt;= mid + <span class="number">1</span> &amp;&amp; t &lt;= tr[u].r)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">2</span> * u + <span class="number">1</span>, s, t, add + tr[u].add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">2</span> * u, s, mid, add + tr[u].add)</span><br><span class="line">     + <span class="built_in">query</span>(<span class="number">2</span> * u + <span class="number">1</span>, mid + <span class="number">1</span>, t, add + tr[u].add);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Segtree Seg;</span><br><span class="line"><span class="type">int</span> a[NR + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">Seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> op, l, r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">Seg.<span class="built_in">modify</span>(<span class="number">1</span>, l, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Seg.<span class="built_in">query</span>(<span class="number">1</span>, l, r, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2025/02/10/Dijkstra/"/>
      <url>/2025/02/10/Dijkstra/</url>
      
        <content type="html"><![CDATA[<h1 id="Dijkstra最短路"><a href="#Dijkstra最短路" class="headerlink" title="Dijkstra最短路"></a>Dijkstra最短路</h1><p>将结点分成两个集合：已确定最短路长度的点集（记为 <code>S</code> 集合）的和未确定最短路长度的点集（记为 <code>T</code> 集合）。一开始所有的点都属于 <code>T</code> 集合。</p><p>初始化 $dis(s)&#x3D;0$，其他点的 dis 均为 $+\infty$。</p><p>然后重复这些操作：</p><p>从 <code>T</code> 集合中，选取一个最短路长度最小的结点，移到 S 集合中。<br>对那些刚刚被加入 <code>S</code> 集合的结点的所有出边执行松弛操作。<br>直到 <code>T</code> 集合为空，算法结束。</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd</title>
      <link href="/2025/02/10/Floyd/"/>
      <url>/2025/02/10/Floyd/</url>
      
        <content type="html"><![CDATA[<h1 id="Floyd最短路"><a href="#Floyd最短路" class="headerlink" title="Floyd最短路"></a>Floyd最短路</h1><p>基于dp的$O(n^3)$时间复杂度，$O(n^2)$空间复杂度算法，适用于无负环的所有图。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][k] + dp[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化时，<code>dp[i][j]</code>为<code>i</code>, <code>j</code> 两点之间的直连距离</p><p>完整状态为<code>dp[k][i][j]</code>，表示只通过前<code>k</code>个点转移，<code>i</code>到<code>j</code>的最短路长度</p><p>可化简为<code>dp[i][j]</code>， 转移方程为$dp_{k, i, j} &#x3D; min(dp_{k - 1, i, j}, dp_{k - 1, i, k} + dp_{k - 1, k, j})$</p><p>可简化为$dp_{i, j} &#x3D; min(dp_{i, j}, dp_{i, k} + dp_{k, j})$</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ST表</title>
      <link href="/2025/02/10/ST%E8%A1%A8/"/>
      <url>/2025/02/10/ST%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>ST表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5</span> * <span class="number">1e4</span>;</span><br><span class="line"><span class="type">int</span> a[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp1[NR + <span class="number">10</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp2[NR + <span class="number">10</span>][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">dp1[i][<span class="number">0</span>] = dp2[i][<span class="number">0</span>] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;(<span class="number">1</span> &lt;&lt; j) &lt;= n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n;i++)&#123;</span><br><span class="line">dp1[i][j] = <span class="built_in">max</span>(dp1[i][j - <span class="number">1</span>], dp1[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;(<span class="number">1</span> &lt;&lt; j) &lt;= n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n;i++)&#123;</span><br><span class="line">dp2[i][j] = <span class="built_in">min</span>(dp2[i][j - <span class="number">1</span>], dp2[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> Max = <span class="built_in">max</span>(dp1[l][k], dp1[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> Min = <span class="built_in">min</span>(dp2[l][k], dp2[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, Max, Min);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCA</title>
      <link href="/2025/02/10/LCA/"/>
      <url>/2025/02/10/LCA/</url>
      
        <content type="html"><![CDATA[<p>P3379</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5</span> * <span class="number">1e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">20</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mp[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">T a = (T)<span class="number">0</span>, b = (T)<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">b = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">a = ((T)a &lt;&lt; <span class="number">3</span>) + ((T)a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x = a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; (T)<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; (T)<span class="number">9</span>)&#123;</span><br><span class="line"><span class="built_in">write</span>(x / (T)<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(x % (T)<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[NR + <span class="number">10</span>][MR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> dep[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span></span>&#123;</span><br><span class="line">fa[u][<span class="number">0</span>] = father;</span><br><span class="line">dep[u] = dep[father] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; MR;i++)&#123;</span><br><span class="line">fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : mp[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(i != father)&#123;</span><br><span class="line"><span class="built_in">init</span>(i, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &lt; dep[v])&#123;</span><br><span class="line"><span class="built_in">swap</span>(u, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = MR - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[fa[u][i]] &gt;= dep[v])&#123;</span><br><span class="line">u = fa[u][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = MR - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i] != fa[v][i])&#123;</span><br><span class="line">u = fa[u][i];</span><br><span class="line">v = fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, T, S;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="built_in">read</span>(T);</span><br><span class="line"><span class="built_in">read</span>(S);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="built_in">read</span>(u);</span><br><span class="line"><span class="built_in">read</span>(v);</span><br><span class="line">mp[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">mp[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>(S, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line"><span class="built_in">read</span>(u);</span><br><span class="line"><span class="built_in">read</span>(v);</span><br><span class="line"><span class="built_in">write</span>(<span class="built_in">lca</span>(u, v), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kruskal算法框架</title>
      <link href="/2025/02/10/Kruskal%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6/"/>
      <url>/2025/02/10/Kruskal%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>【Kruskal算法框架】</p><ol><li>将所有边按边权排序</li><li>初始化每个点自己是自己的代表元 fa[i]&#x3D;i</li><li>依次考虑每一条边&lt;a, b&gt;</li></ol><p>3.1. pa &#x3D; a的终极代表元，pb &#x3D; b的终极代表元</p><p>3.2. 如果pa&#x3D;&#x3D;pb（两端连通），continue</p><p>3.3. 将&lt;a, b&gt;边权累计入ans</p><p>3.4. 令 fa[pa] &#x3D; pb（为其中的一个终极代表元设置代表元）</p><ol start="4"><li>输出</li></ol><p>getfa(x) &#x2F;&#x2F; 找x的终极代表元</p><p>如果 x &#x3D;&#x3D; fa[x]，返回 x</p><p>否则，令fa[x] &#x3D; getfa(fa[x])，并返回fa[x]</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20231229题解</title>
      <link href="/2025/02/09/20231229%E9%A2%98%E8%A7%A3/"/>
      <url>/2025/02/09/20231229%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 2023/12/29 元旦欢乐赛（伪）题解</span><br><span class="line"></span><br><span class="line">T1-seq</span><br><span class="line">核心算法：DP</span><br><span class="line"></span><br><span class="line">按照正整数从小到大的顺序去替换每一个序列元素。每次处理完的一定是两个序列前缀</span><br><span class="line">设f[i][j]表示考虑A的前i个元素、B的前j个元素，最后使用的正整数的最小值</span><br><span class="line">两种转移：</span><br><span class="line">a. 从f[i-1][j]过来，要替换A[i]，计算出A[i]应该用什么正整数替换</span><br><span class="line">b. 从f[i][j-1]过来，要替换B[j]，计算出B[j]应该用什么正整数替换</span><br><span class="line">f[i][j]取两种方案的最小值</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T2 - triangle</span><br><span class="line">核心算法：前缀和</span><br><span class="line"></span><br><span class="line">考虑直线是垂直于x轴的情况，另一种情况同理</span><br><span class="line">假设直线为x=x&#x27;（某条竖线）</span><br><span class="line">三角形被一分为二，当且仅当三角形最靠左的顶点在竖线左边（顶点坐标中最小的x&lt;x&#x27;），最靠右的顶点在竖线右边（顶点坐标中最大的x&gt;x&#x27;）</span><br><span class="line">所以对于每一条竖线，前缀和预处理出有多少个三角形最左的顶点在它及左边（记为s1[x]）、三角形最右的顶点在它及左边（记为s2[x]）</span><br><span class="line">那么对于x=x&#x27;，答案为s1[x&#x27;-1] - x2[x&#x27;]</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T3 - matrix</span><br><span class="line">核心算法：单调栈</span><br><span class="line"></span><br><span class="line">考虑恰好以某个位置为右下角有多少个合法的子矩阵</span><br><span class="line"> *   ***</span><br><span class="line">** *****</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">对于上图右下角的考虑，等同于下图</span><br><span class="line">     ***</span><br><span class="line">   *****</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">********</span><br><span class="line">从左往右先是高度3的区域（宽3），再是高度4的区域（宽2），最后是高度5个区域（宽3）</span><br><span class="line">因此，上图右下角所对应的矩阵数是 3*3 + 4*2 + 5*3</span><br><span class="line">我们先计算出以每个位置为下端的向上拥有相同元素的长条高度</span><br><span class="line">对于每一行，单调栈维护出一系列高度递增的元素相同的矩形区域即可求解</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T4 - calc</span><br><span class="line">核心算法：数学、高精度</span><br><span class="line"></span><br><span class="line">通过裂项、通分等，对式子进行化简，然后高精度</span><br><span class="line">对于最后既约分数的计算，要注意到，公因子的范围不会超过N+M-1，所以，除法我们只需要高精度除以单精度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">T5 - graph</span><br><span class="line">核心算法：最小生成树</span><br><span class="line"></span><br><span class="line">最终只能是势能高的连向势能低的</span><br><span class="line">对于第一问的求解，只需要做个dfs/bfs遍历</span><br><span class="line">在第一问的基础上计算第二问，我们只考虑对答案有意义的有向边</span><br><span class="line">将这些边按终点势能从大到小（排序的第一关键字），按边权从小到大排序（排序的第二关键字）</span><br><span class="line">然后做Kruskal（只是边的排序方式不一样，剩下算法操作不变）</span><br><span class="line"></span><br><span class="line">当然，本题也可以用Prim求解，方法自行考虑</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20230210学校比赛</title>
      <link href="/2025/02/09/20230210%E5%AD%A6%E6%A0%A1%E6%AF%94%E8%B5%9B/"/>
      <url>/2025/02/09/20230210%E5%AD%A6%E6%A0%A1%E6%AF%94%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>T1:</p><p>枚举区间用插入排序的方法维护区间内最大的100个数，和用链表维护区间外的最大值</p><p>枚举交换的次数，把区间内最小的数和区间外头最大的数交换。</p><p>T2:</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快读快写</title>
      <link href="/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/"/>
      <url>/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">T a = (T)<span class="number">0</span>, b = (T)<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">b = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">a = ((T)a &lt;&lt; <span class="number">3</span>) + ((T)a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x = a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; (T)<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; (T)<span class="number">9</span>)&#123;</span><br><span class="line"><span class="built_in">write</span>(x / (T)<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(x % (T)<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> string <span class="title">strread</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    string ret = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span> || ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span> || ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span> || ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span> || ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">        ret += ch;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法板子</title>
      <link href="/2025/02/09/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/"/>
      <url>/2025/02/09/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="算法板子"><a href="#算法板子" class="headerlink" title="算法板子"></a>算法板子</h1><ol><li><a href="https://imguojiahe.github.io/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/">快读快写: 用字符读入方法读入数字</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/Kruskal%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6/">Kruskal算法框架</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/LCA/">LCA: 利用倍增法向上爬树寻找相同点</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/ST%E8%A1%A8/">ST表: 分成有2^n长度组成的小部分，再用类似dp的方法推出其他小部分的最大最小值</a></li><li>树上差分: 利用差分思想加减点权<br>  <img src="https://cdn.luogu.com.cn/upload/image_hosting/bmo0jmb6.png"></li><li><a href="https://imguojiahe.github.io/2025/02/10/Floyd/">Floyd</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/Dijkstra/">Dijkstra</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/%E7%BA%BF%E6%AE%B5%E6%A0%91/">线段树</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/">树状数组</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/KMP%20%E4%B8%8E%20KMP%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/">KMP &amp; KMP 字符串查找</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/%E6%8B%93%E5%B1%95%20KMP%20(exKMP)/">拓展KMP</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/manacher/">manacher</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%EF%BC%88%E6%A0%91%E5%89%96%EF%BC%89/">树链剖分（树剖）</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20Suffix%20Array/">后缀数组（SA）: 利用倍增的思想求解字符串所有后缀按字典序排序后的顺序</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/">AC 自动机: 将 KMP 的思想运用到 字典树 上，以在单个文本串中匹配多个模板串</a></li><li><a href="https://imguojiahe.github.io/2025/02/10/%E5%8E%8B%E4%BD%8D%E9%AB%98%E7%B2%BE%E5%BA%A6/">压位高精度</a></li><li><a href="https://imguojiahe.github.io/2025/02/12/%E6%AC%A7%E6%8B%89%E7%AD%9B%20&%20%E6%B1%82%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/">欧拉筛 &amp; 求欧拉函数</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
          <category> 算法板子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强力杀极域电子教室</title>
      <link href="/2025/02/09/%E5%BC%BA%E5%8A%9B%E6%9D%80%E6%9E%81%E5%9F%9F%E7%94%B5%E5%AD%90%E6%95%99%E5%AE%A4/"/>
      <url>/2025/02/09/%E5%BC%BA%E5%8A%9B%E6%9D%80%E6%9E%81%E5%9F%9F%E7%94%B5%E5%AD%90%E6%95%99%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<p><code>taskkill /f /im StudentMain.exe</code></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录</title>
      <link href="/2025/02/09/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2025/02/09/%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h1><p>ex. <a href="http://yuantiji.ac/zh/">原题机</a></p><p>ex. <a href="https://imguojiahe.github.io/2025/02/09/%E5%BC%BA%E5%8A%9B%E6%9D%80%E6%9E%81%E5%9F%9F%E7%94%B5%E5%AD%90%E6%95%99%E5%AE%A4/">强力杀极域电子教室</a></p><p>ex. <a href="https://imguojiahe.github.io/2025/02/09/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/">算法板子</a></p><p>ex. <a href="https://imguojiahe.github.io/2025/02/09/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99/">快读快写</a></p><p>ex. <a href="http://yuantiji.ac/zh/">原题查找站</a></p><p>ex. <a href="https://www.luogu.com.cn/paste/d0ar2y9p">原题查找1</a></p><ol><li><a href="https://imguojiahe.github.io/2025/02/09/20230210%E5%AD%A6%E6%A0%A1%E6%AF%94%E8%B5%9B/">2023&#x2F;2&#x2F;10学校比赛</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/vvrgfpwh.png">P7883框架</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/ai1od25q.png">T225800框架</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/yf4vbvx2.png">P5094框架</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/u9l64rnb.png">春测题解</a></li><li><a href="https://cdn.luogu.com.cn/upload/image_hosting/w9ealk20.png">2023&#x2F;3&#x2F;22单调队列参考</a></li><li><a href="https://csacademy.com/app/graph_editor/">生成图</a></li><li><a href="https://www.sharelikes.com.cn/">P社游戏资源</a></li><li><a href="https://game.chronodivide.com/">红警2网页版</a></li><li><a href="https://imguojiahe.github.io/2025/02/09/20231229%E9%A2%98%E8%A7%A3/">2023&#x2F;12&#x2F;29题解</a></li></ol><p>ex. <a href="https://www.luogu.com.cn/paste/i0rd6wcb">工具箱</a></p>]]></content>
      
      
      <categories>
          
          <category> 洛谷剪贴板搬运 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共串题解</title>
      <link href="/2023/02/18/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E4%B8%B2%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E4%B8%B2%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YjJEjqE.png"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一颗 $n$ 个点的树，每个点 $i$ 上都有一个字符串 $s_i$，求所有两点间简单路径 $x,y(x &lt; y)$ 的个数，满足 $|lcp(s_{p_1} , s_{p_2} , \dots , s_{p_t})| \geq k$ ，其中 $lcp$ 为最长公共前缀， $p_1,\dots,p_t$ 为简单路径上所有经过的点</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个正整数 $n, k$</p><p>接下来的 $n$ 行每行一个字符串，其中第 $i$ 行的字符串是 $s_i$，字符集为 $0$ 到 $9$ 的数字</p><p>接下来的 n-1<em>n</em>−1 行每行两个正整数 $x, y$ ，代表一条树边</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个正整数，代表答案</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6 1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">3 2</span><br><span class="line">1 4</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><h5 id="【样例解释】"><a href="#【样例解释】" class="headerlink" title="【样例解释】"></a>【样例解释】</h5><p>满足条件的路径仅有 $(1,2),(1,5),(2,5)$ </p><h5 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h5><table><thead><tr><th>subtask 编号</th><th>$n$</th><th>$\sum s_i$</th><th>特殊性质</th><th>分数</th></tr></thead><tbody><tr><td>1</td><td>$\leq 638$</td><td>$\leq 10^5$</td><td>无</td><td>$10$</td></tr><tr><td>2</td><td>$\leq 2000$</td><td>$\leq 10^5$</td><td>无</td><td>$10$</td></tr><tr><td>3</td><td>$\leq 10^5$</td><td>$\leq 3\times 10^6≤3×106$</td><td>无</td><td>$20$</td></tr><tr><td>4</td><td>$\leq 10^5$</td><td>$\leq 3\times 10^6$</td><td>保证树为链</td><td>$20$</td></tr><tr><td>5</td><td>$\leq 10^6$</td><td>$\leq 5\times 10^6$</td><td>任意两字符串公共前缀 $&lt; k$</td><td>$10$</td></tr><tr><td>6</td><td>$\leq 10^6$</td><td>$\leq 5\times 10^6$</td><td>无</td><td>$30$</td></tr></tbody></table><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于题目要求树上简单路径的元素的公共前缀长度至少为 $k$ 的路径个数，所以可以只看每个字符串的前 $k$ 位，如果某个字符串的长度小于 $k$ 则直接排除，在计算时不算这个点</p><p>使用 <code>vector</code> 存边，<code>vector[i]</code> 里面存的是与点 $i$ 相连的所有点。</p><p>计算有多少条路径满足条件时，使用 <code>dfs</code> 搜索，记录某个节点的父亲节点和这个节点的编号，并搜索该节点的所有儿子节点</p><p>然后推导计算某个节点有多少种方案，式子如下图：</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20220504215447041.png" alt="图1"></p><p>最终把所有答案累计求和，输出</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> P1 = <span class="number">2147483647</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> P2 = <span class="number">1437356741</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">T a = (T)<span class="number">0</span>, b = (T)<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">b = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">a = ((T)a &lt;&lt; <span class="number">3</span>) + ((T)a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x = a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; (T)<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt; (T)<span class="number">9</span>)&#123;</span><br><span class="line"><span class="built_in">write</span>(x / (T)<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(x % (T)<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//字符串哈希函数</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Hash_s</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;i++)&#123;</span><br><span class="line">        ret1 = (ret1 * <span class="number">10949ll</span> + <span class="number">17ll</span> * s[i]) % P1;</span><br><span class="line">        ret2 = (ret2 * <span class="number">21911ll</span> + <span class="number">37ll</span> * s[i]) % P2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret1 &lt;&lt; <span class="number">30</span> | ret2;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//搜索函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="comment">//搜索其所有的子节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != fa) <span class="built_in">dfs</span>(i, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果该字符串的长度不合法，结束</span></span><br><span class="line">    <span class="keyword">if</span>(a[x] == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//求该点的值</span></span><br><span class="line">    <span class="comment">//分开成两个变量统计</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret1 = <span class="number">0</span>, ret2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v[x]) <span class="keyword">if</span>(i != fa)&#123;<span class="comment">//不走回头路</span></span><br><span class="line">        <span class="comment">//前缀要相等</span></span><br><span class="line">        <span class="keyword">if</span>(a[i] != a[x])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算</span></span><br><span class="line">        ret1 += <span class="number">1ll</span> * b[i];</span><br><span class="line">        ret2 += <span class="number">1ll</span> * b[i] * b[i];</span><br><span class="line">        b[x] += b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sum += ret1;</span><br><span class="line">    sum += (ret1 * ret1 - ret2) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//读入</span></span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(s + <span class="number">1</span>) &gt;= k) a[i] = <span class="built_in">Hash_s</span>(k);<span class="comment">//对字符串哈希，使其更好处理</span></span><br><span class="line">        <span class="keyword">else</span> cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">read</span>(l);</span><br><span class="line">        <span class="built_in">read</span>(r);</span><br><span class="line">        v[l].<span class="built_in">emplace_back</span>(r);</span><br><span class="line">        v[r].<span class="built_in">emplace_back</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特判</span></span><br><span class="line">    <span class="keyword">if</span>(cnt == n)&#123;</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">0</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化每个点有的方案个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        b[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搜索</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="built_in">write</span>(sum, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解 </category>
          
          <category> 原创题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO23JAN Following Directions S 题解</title>
      <link href="/2023/02/18/USACO23JAN_Following_Directions_S_%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/USACO23JAN_Following_Directions_S_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>预处理每个点经过的牛数 $cnt_{i, j}$，每次更改一个点的指向时，计算更改前的终点坐标 <code>Old</code> 和更改后的终点坐标 <code>New</code>（不要忘了修改是一直保留的，在计算终点的过程中要顺便更改途经点的牛数和出发点的路牌方向 <del>，某蒟蒻在这个问题上调了 10min</del>）。</p><p>新答案是旧答案 $ans$ 减去出发点牛数 $cnt_{x, y}$ 与 旧终点花费 <code>a[oldx][oldy].x</code> 的积， 加上出发点牛数 $cnt_{x, y}$ 与 新终点花费 <code>a[newx][newy].x</code> 的积。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> NR = <span class="number">15</span> * <span class="number">1e2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="built_in">Node</span>()&#123;</span><br><span class="line">        c = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">&#125;a[NR + <span class="number">10</span>][NR + <span class="number">10</span>];   <span class="comment">//结构体存储输入</span></span><br><span class="line"><span class="type">char</span> s[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> cnt[NR + <span class="number">10</span>][NR + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="comment">//读入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            a[i][j].c = s[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i][n + <span class="number">1</span>].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[n + <span class="number">1</span>][j].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//预处理每个点经过的牛数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n + <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= n + <span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == n + <span class="number">1</span> &amp;&amp; j == n + <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= n &amp;&amp; j &lt;= n)&#123;   <span class="comment">//住所</span></span><br><span class="line">                <span class="keyword">if</span>(a[i - <span class="number">1</span>][j].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                    cnt[i][j] += cnt[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j - <span class="number">1</span>].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                    cnt[i][j] += cnt[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                cnt[i][j]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;   <span class="comment">//饲料桶</span></span><br><span class="line">                <span class="keyword">if</span>(i == n + <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i - <span class="number">1</span>][j].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                        cnt[i][j] += cnt[i - <span class="number">1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == n + <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i][j - <span class="number">1</span>].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                        cnt[i][j] += cnt[i][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算最初花费</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        sum += <span class="number">1ll</span> * cnt[n + <span class="number">1</span>][i] * a[n + <span class="number">1</span>][i].x;</span><br><span class="line">        sum += <span class="number">1ll</span> * cnt[i][n + <span class="number">1</span>] * a[i][n + <span class="number">1</span>].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);   <span class="comment">//输出</span></span><br><span class="line">    <span class="comment">//处理更改</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);   <span class="comment">//读入</span></span><br><span class="line">        <span class="comment">//计算旧路径</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> posx = x, posy = y;</span><br><span class="line">        <span class="keyword">while</span>(posx != n + <span class="number">1</span> &amp;&amp; posy != n + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                posx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                posy++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[posx][posy] -= cnt[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> tmpx = posx, tmpy = posy;</span><br><span class="line">        posx = x, posy = y;</span><br><span class="line">        <span class="comment">//更改方向</span></span><br><span class="line">        <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">            a[posx][posy].c = <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">            a[posx][posy].c = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算新路径</span></span><br><span class="line">        <span class="keyword">while</span>(posx != n + <span class="number">1</span> &amp;&amp; posy != n + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">                posx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[posx][posy].c == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">                posy++;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt[posx][posy] += cnt[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算并输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum - cnt[x][y] * a[tmpx][tmpy].x</span><br><span class="line">                             + cnt[x][y] * a[posx][posy].x);</span><br><span class="line">        sum -= cnt[x][y] * a[tmpx][tmpy].x;</span><br><span class="line">        sum += cnt[x][y] * a[posx][posy].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解 </category>
          
          <category> 洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO2023Jan银组题解</title>
      <link href="/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Find-and-Replace"><a href="#Find-and-Replace" class="headerlink" title="Find and Replace"></a>Find and Replace</h1><p><strong>目前还不正确的思路</strong></p><p>想象为图，每个字母向ta要转换为的那个字母连接一条单向边，接着遍历每个字母，处理一下情况：</p><ol><li>字母 c 同时要变成字母 c1 和字母 c2，若发生这种情况，输出 $-1$，处理下一个数据。</li><li>字母 c1 指向字母 c2 且字母 c2 <strong>也</strong>指向字母 c1,若发生这种情况，按键总数加 $3$。</li><li>字母 c1 指向字母 c2 且字母 c2 <strong>不</strong>指向字母 c1,若发生这种情况，按键总数加 $1$。</li></ol><h1 id="Following-Directions"><a href="#Following-Directions" class="headerlink" title="Following Directions"></a>Following Directions</h1><p><a href="https://s1.ax1x.com/2023/01/31/pS0hLkT.jpg">正确的</a>思路</p><p>预处理每个点经过的牛数 $cnt_{i, j}$，每次更改一个点的指向时，计算更改前的终点坐标 <code>Old</code> 和更改后的终点坐标 <code>New</code> （不要忘了修改是一直保留的，在计算终点的过程中要顺便更改途经点的牛数和出发点的路牌方向 <del>，某蒟蒻在这个问题上调了10min</del>）。</p><p>新答案是旧答案 $ans$ 减去出发点牛数 $cnt_{x, y}$ 与 旧终点花费 $a[oldx][oldy].x$ 的积， 加上出发点牛数 $cnt_{x, y}$ 与 新终点花费 $a[newx][newy].x$ 的积。</p><h1 id="Moo-Route"><a href="#Moo-Route" class="headerlink" title="Moo Route"></a>Moo Route</h1><p><a href="https://s1.ax1x.com/2023/01/31/pS04tjs.jpg">正确的</a>思路</p><p>构造题，一开始必定会向右走，所以第一步先输出’R’，再从 $1$ 开始模拟。每次比较当前和当前左面一个的大小，当前大就向右走并减少一次穿过当前点的次数；当前小就向左走并减少一次穿过左边点的次数</p>]]></content>
      
      
      <categories>
          
          <category> 编程题解，USACO题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO2023Jan银组翻译</title>
      <link href="/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E7%BF%BB%E8%AF%91/"/>
      <url>/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Find-and-Replace"><a href="#Find-and-Replace" class="headerlink" title="Find and Replace"></a>Find and Replace</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>Bessie正在使用最新、最NB的文本编辑软件miV!！从一个仅由大写和小写英文字母组成的输入字符串开始，希望将其转化为某个输出字符串。只需一个按键，miV就能让她替换所有出现的一个英文字母 $c_1$ 为 $c_2$ 。例如，给定字符串 $aAbBa$，如果Bessie选择 $c_1$ 为 ‘a’ 且 $c_2$ 为 ‘B’，则所给的字符串转化为 $BAbBBBAbBB$</p><p>贝西是一头忙碌的奶牛，所以对于 $T(1 \leqslant t \leqslant 10) $ 组数据中的每一个， 输出将她的输入字符串转化为她所期望的输出字符串所需的最少按键数。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行为一个正整数 $T$，表示独立测试案例的数量。</p><p>之后的 $T$ 对每对包含一个长度相同的原始和期望字符串。所有字符都是大写或小写的英文字母。所有字符串的长度之和不超过 $10^5$。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试案例，输出将输入字符串变为输出字符串所需的最小敲击键数，或$-1$如果不可能这样做。</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line">BBC</span><br><span class="line">ABC</span><br><span class="line">abc</span><br><span class="line">bbc</span><br><span class="line">ABCD</span><br><span class="line">BACD</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">-1</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h2><p>第一个输入字符串与它的输出字符串相同，所以不需要击键。</p><p>第二个输入字符串不能被改变成其输出字符串，因为Bessie不能改变一个 ‘B’ 变为 ‘A’ 而保存另一个字符为 ‘B’。</p><p>第三个输入字符串可以通过改变 ‘a’ 为 ‘b’ 变为输出字符串。</p><p>最后一个输入字符串可以像这样改成它的输出字符串：$ABCD→EBCD→EACD→BACD$</p><h1 id="Following-Directions"><a href="#Following-Directions" class="headerlink" title="Following Directions"></a>Following Directions</h1><h2 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h2><p><strong>注意：这个问题的时间限制是8秒，是默认值的四倍</strong>。</p><p>农民约翰有一块 $(n + 1) \times (n + 1) (1 \leqslant n \leqslant 10)$ 正方形的大田，被分割成一个个的小块。</p><p>方格 $(i, j)$ 表示上数第 $i$ 行左数第 $j$ 列的方格。对于每个方格 &#x3D;&#x3D;$(i, j) (1 \leqslant i, j \leqslant n)$&#x3D;&#x3D;，其中都有一头牛，而每一个这样的方格也包含一个指向右边或向下的路标。对于每个方格 &#x3D;&#x3D;$(i, j) (i &#x3D; n + 1 或j &#x3D; n + 1)$&#x3D;&#x3D; （$(n + 1, n + 1)$ 除外）有一大桶的奶牛饲料。每个大桶里都有不同价格的奶牛饲料。位于 $(i, j)$ 的价格为 $c_{i, j}$。</p><p>每天晚餐时间，农夫约翰敲响晚餐的钟声，每头牛一直沿着路标的方向走，直到到达一个大桶，然后从这个大桶中获得食物。然后，奶牛们都回到它们原来的位置，准备第二天的工作。</p><p>为了维持预算，农夫约翰想知道每天喂养所有奶牛的总成本。然而，在每天的晚餐前，一些在方格 $i, j$ 里的奶牛翻转其指针的方向（从右到下或反之），在接下来的日子里，路标也会保持在这个方向，除非后来被翻转回来。</p><p>给出每天被翻转的路标的坐标，输出每天的成本(总共有 $Q (1 \leqslant Q \leqslant 1500)$)</p><h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><p>第一行为一个正整数 $N$。</p><p>之后的 $N + 1$ 行表示整个牧场的路标以及价格(R, D分别代表指向右方或下方的路标)。</p><p>下一行为一个正整数 $Q$。</p><p>之后的 $Q$ 行每行包括两个正整数 $(i, j)$，这是其标志物在相应日期被翻转的单元的坐标。</p><h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><p>共 $Q + 1$ 行：总成本的原始值，然后是每次翻转后的总成本值。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">RR 1</span><br><span class="line">DD 10</span><br><span class="line">100 500</span><br><span class="line">4</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">602</span><br><span class="line">701</span><br><span class="line">602</span><br><span class="line">701</span><br><span class="line">1501</span><br></pre></td></tr></table></figure><h1 id="Moo-Route"><a href="#Moo-Route" class="headerlink" title="Moo Route"></a>Moo Route</h1><h2 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h2><p>农民Nhoj把Bessie丢在了荒郊野外！在时刻$t &#x3D; 0$ 时，Bessie一条无限的数轴上位于 $x &#x3D; 0$。她每秒疯狂地通过向左或向右移动 $1$ 个单位来寻找一个出口。然而，实际上并没有出口，而且在 $T$ 秒后，Bessie又回到了 $x &#x3D; 0$.</p><p>农民Nhoj试图追踪Bessie，但只知道Bessie穿过 $x &#x3D; 0.5, 1.5, 2.5, 3.5, …, (N - 1).5$的次数，由一个数组 $A()$ 给出。Bessie不可能到达 $x &gt; n$ 或 $x &lt; 0$的点。</p><p>特别是，Bessie的路线可以用一个字符串串 $T&#x3D;∑^{N−1}_{i&#x3D;0}Ai$ 为 ‘L’ 或 ‘R’ ，是Bessie第 $i$ 秒的运动方向。方向改变的数量被定义为出现在 “LR” 的数量加上 “RL” 的数量。</p><p>请帮助农夫Nhoj找到贝西可能走的与A一致的路线，并尽量减少方向变化的次数。保证至少有一条有效路线。</p><h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><p>第一行一个正整数 $n$</p><p>第二行 $n$ 个整数，代表 $A_0, A_1, …A{n - 1}$</p><h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><p>一个字符串串 $T&#x3D;∑^{N−1}_{i&#x3D;0}Ai$ 为 ‘L’ 或 ‘R’ ，代表 Bessie 在第 $i$ 秒的行进方向。如果有多条路线，输出转向次数最小的任意一条。</p>]]></content>
      
      
      <categories>
          
          <category> 编程题目翻译，USACO题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO2023Jan银组总结</title>
      <link href="/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/18/USACO2023Jan%E9%93%B6%E7%BB%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>上来第一眼习惯性的找中文翻译，然后</p><p><a href="https://imgse.com/i/pS0hee0"><img src="https://s1.ax1x.com/2023/01/31/pS0hee0.jpg" alt="pS0hee0.jpg"></a></p><p><strong>大哥！！！你中文翻译呢！！！</strong></p><p>在之后就开始了漫长的翻译的过程（自翻+机翻）<br>在漫长的40多分钟之后，一篇<del>毫无意义且浪费时间的</del>翻译就写完了。<br><a href="https://www.luogu.com.cn/blog/gjhdbk/usaco2023jan-yin-zu-fan-yi">翻译链接</a></p><p>现在看来如果在多几十分钟编程可能能AK？（并不确定）</p><p>每道题都看完之后，发现B好像有一点点<a href="https://www.luogu.com.cn/blog/gjhdbk/usaco2023jan-yin-zu-ti-xie">思路</a>，就先把 B 题切了。过程中忘记了  <em>翻转之后路标也会保持在这个方向，除非后来被翻转回来</em>  这一点调了10分钟。</p><p>然后是 C 题，在纸上划拉了几下之后盲猜了一种用 S 形的路来覆盖的方法，居然就给 AC 了！（纯侥幸）但每次都会莫名其妙的迷之输出一个多余的字符（最后我用存到字符串里后删掉最后一个多余的字符再输出）。</p><p>AC这两题之后就只剩下不到 $20min$ 的时间了，勉勉强强想出 A 题思路写完调完之后发现比赛就这么结束了(＃￣～￣＃)，也没交上去，现在还不知道对错。</p><p>所以说，如果少花几十分钟在翻译上的话可能能AK。</p>]]></content>
      
      
      <categories>
          
          <category> 参赛总结，USACO题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参赛总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/18/test/"/>
      <url>/2023/02/18/test/</url>
      
        <content type="html"><![CDATA[<style>@keyframes gradientBG{0%{background-position: 0% 50%;}50%{background-position: 100% 50%;}100% {background-position: 0% 50%;}}#rightside{display:none;}</style><blockquote><p>这个页面是用来测试渐变背景的效果，以及不同透明度的效果。如果你有能力可以直接看 css 样式。否则请返回<a href="https://www.antmoe.com/posts/7198453/index.html#%E9%99%84%E5%BD%95">Hexo 博客之 butterfly 主题优化更换背景</a>复制代码。<br>阅读体验及个标签样式请自己进行调整。</p></blockquote><h2 id="透明度调节"><a href="#透明度调节" class="headerlink" title="透明度调节"></a>透明度调节</h2><center style='margin-bottom:20px' id = 'opt'><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0">透明度0</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.1">透明度0.1</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.2">透明度0.2</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.3">透明度0.3</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.4">透明度0.4</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.5">透明度0.5</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.6">透明度0.6</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.7">透明度0.7</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.8">透明度0.8</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="0.9">透明度0.9</a><a style="color: #FFF;margin-bottom: 10px;"  style="color: #FFF;" href="#" class="button button-primary button-rounded button-small" data-opacity="1">透明度1</a></center><h2 id="背景调节"><a href="#背景调节" class="headerlink" title="背景调节"></a>背景调节</h2><div id='demo_style' style='text-align:center;margin:0 auto;'><h3 id="渐变类"><a href="#渐变类" class="headerlink" title="渐变类"></a>渐变类</h3><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px;background: url(&quot;https://ae01.alicdn.com/kf/H5662031fbf344418aa2c8bf74c68826eV.png&quot;),linear-gradient(45deg, #6dd0f2 15%, #f59abe 85%);text-align: center;line-height: 200px;margin-bottom:5px;cursor: pointer;">粉蓝色有图片</div><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px;background: linear-gradient(45deg, #6dd0f2 15%, #f59abe 85%);text-align: center;line-height: 200px;cursor: pointer;">粉蓝色无图片</div><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px;background: linear-gradient(102.7deg,#fddaff 8.2%,#dfadfc 19.6%,#adcdfc 36.8%,#adfcf4 73.2%,#caf8d0 90.9%);text-align: center;line-height: 200px;cursor: pointer;">美美哒渐变</div><div data-type="color" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: linear-gradient(90deg,rgba(247,149,51,.1) 0,rgba(243,112,85,.1) 15%,rgba(239,78,123,.1) 30%,rgba(161,102,171,.1) 44%,rgba(80,115,184,.1) 58%,rgba(16,152,173,.1) 72%,rgba(7,179,155,.1) 86%,rgba(109,186,130,.1) 100%);text-align: center;line-height: 200px;cursor: pointer;">粉</div><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);    background-size: 400% 400%;animation: gradientBG 15s ease infinite;text-align: center;line-height: 200px;cursor: pointer;">动态渐变</div><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: linear-gradient(to right bottom, rgb(0, 255, 240), rgb(92, 159, 247) 40%, rgb(211, 34, 255) 80%);text-align: center;line-height: 200px;cursor: pointer;">紫蓝色渐变</div><h3 id="渐变加图片类"><a href="#渐变加图片类" class="headerlink" title="渐变加图片类"></a>渐变加图片类</h3><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)), url(https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png),url(https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg)0% 0% / cover;text-align: center;line-height: 200px;cursor: pointer; background-size: cover;">紫蓝色渐变</div><h3 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a>图片类</h3><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: url(https://api.abcyun.co/api/tool/bing/token/5d8f31cf6a8ab);text-align: center;line-height: 200px;cursor: pointer; background-size: cover;">必应壁纸</div><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: url(https://api.abcyun.co/api/others/randacgimage/token/5d8f31cf6a8ab);text-align: center;line-height: 200px;cursor: pointer; background-size: cover;">随机二次元图</div><div data-type="photo" class='bg_test' style="display:inline-block;width: 200px;height:200px; background: url(https://api.abcyun.co/api/others/randacgblogbg/token/5d8f31cf6a8ab);text-align: center;line-height: 200px;cursor: pointer; background-size: cover;">随机二次元背景图</div></div><h2 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h2><h3 id="春"><a href="#春" class="headerlink" title="春"></a>春</h3><p>盼望着，盼望着，东风来了，春天的脚步近了。</p><p>一切都像刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水长起来了，太阳的脸红起来了。</p><p>小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。坐着，躺着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草绵软软的。</p><p>桃树、杏树、梨树，你不让我，我不让你，都开满了花赶趟儿。红的像火，粉的像霞，白的像雪。花里带着甜味，闭了眼，树上仿佛已经满是桃儿、杏儿、梨儿。花下成千成百的蜜蜂嗡嗡地闹着，大小的蝴蝶飞来飞去。野花遍地是：杂样儿，有名字的，没名字的，散在花丛里，像眼睛，像星星，还眨呀眨的。</p><p>“吹面不寒杨柳风”，不错的，像母亲的手抚摸着你。风里带来些新翻的泥土的气息，混着青草味，还有各种花的香，都在微微润湿的空气里酝酿。鸟儿将窠巢安在繁花嫩叶当中，高兴起来了，呼朋引伴地卖弄清脆的喉咙，唱出宛转的曲子，与轻风流水应和着。牛背上牧童的短笛，这时候也成天在嘹亮地响。</p><p>雨是最寻常的，一下就是三两天。可别恼。看，像牛毛，像花针，像细丝，密密地斜织着，人家屋顶上全笼着一层薄烟。树叶子却绿得发亮，小草也青得逼你的眼。傍晚时候，上灯了，一点点黄晕的光，烘托出一片这安静而和平的夜。乡下去，小路上，石桥边，撑起伞慢慢走着的人;还有地里工作的农夫，披着蓑，戴着笠的。他们的草屋，稀稀疏疏的在雨里静默着。</p><p>天上风筝渐渐多了，地上孩子也多了。城里乡下，家家户户，老老小小，他们也赶趟儿似的，一个个都出来了。舒活舒活筋骨，抖擞抖擞精神，各做各的一份事去，“一年之计在于春”;刚起头儿，有的是工夫，有的是希望。</p><p>春天像刚落地的娃娃，从头到脚都是新的，它生长着。</p><p>春天像小姑娘，花枝招展的，笑着，走着。</p><p>春天像健壮的青年，有铁一般的胳膊和腰脚，他领着我们上前去。</p><ol><li>有序列表</li><li>有序</li><li>有</li></ol><ul><li>无需列表</li><li>测试</li></ul><div class="note default icon flat"><p>default</p></div><div class="note primary icon flat"><p>primary</p></div><div class="note success icon flat"><p>success</p></div><div class="note info icon flat"><p>info</p></div><div class="note warning icon flat"><p>warning</p></div><div class="note danger icon flat"><p>danger</p></div><div class="note primary no-icon flat"><h4 id="Primary-HeaderWelcome-to-Hexo"><a href="#Primary-HeaderWelcome-to-Hexo" class="headerlink" title="Primary HeaderWelcome to Hexo!"></a>Primary Header<strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></h4></div><script>var article_container=document.getElementById("demo_style"),opt=document.getElementById("opt");article_container.addEventListener("click",function(e){var t=e.target;"DIV"===t.nodeName&&"bg_test"===t.className&&(web_bg.style.background=t.style.background,web_bg.style.animation=t.style.animation),Cookies.set("bg",t.style.background,{expires:1}),Cookies.set("animation",t.style.animation,{expires:1}),Cookies.set("type",t.getAttribute("data-type"),{expires:1})}),opt.addEventListener("click",function(e){var t=e.target;if("A"===t.nodeName){var a=t.getAttribute("data-opacity");if(a){Cookies.set("opacity",a,{expires:1});var n="--light_bg_color: rgb(255, 255, 255,"+a+");",i="--dark_bg_color: rgba(18,18,18,"+a+");";document.getElementById("content-inner").setAttribute("style",n+i)}}e.preventDefault()});</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>P8550 冬之花 题解</title>
      <link href="/2023/02/18/P8550_%E5%86%AC%E4%B9%8B%E8%8A%B1_%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/P8550_%E5%86%AC%E4%B9%8B%E8%8A%B1_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对一个数 $x$，进行 $10^{100}$ 次操作，每次操作为：把这个数加上 $a_i(1 \le i \le n)$ 。</p><p>问能不能在这 $10^{100}$ 中，不出现为 $0$ 的数？</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如果 $x$ 为正数，有两种情况满足题目条件：</p><ol><li>$a$ 数组中有正数（一直累加这一个数，$x$ 逐渐变大，不可能变成0）；</li><li>$a$ 数组中有负数且 $n$ 不能被 $\left| a_i \right|$ 整除（会变成负数但不会出现 $0$ ）。</li></ol><p>同样，如果 $x$ 为负数，也有两种情况满足题目条件：</p><ol><li>$a$ 数组中有负数；（一直累加这一个数，$x$ 逐渐变小，不可能变成0）；</li><li>$a$ 数组中有正数数且 $\left| n \right|$ 不能被 $a_i$ 整除（会变成正数但不会出现 $0$ ）。</li></ol><p>所以，我们可以遍历题目给出的每一个数，判断它是否满足条件，只要有一个数满足上面的条件，答案便为可行，若没有一个数满足，则答案为不可行。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[NR + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;                              <span class="comment">//多组数据</span></span><br><span class="line">        <span class="type">int</span> n, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;x);                  <span class="comment">//读入</span></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x &gt; <span class="number">0</span>)&#123;                  <span class="comment">//正数中的1.</span></span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">abs</span>(x) % a[i]) flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;                        <span class="comment">//负数中的2.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x &lt; <span class="number">0</span>)&#123;                  <span class="comment">//负数中的1.</span></span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x % <span class="built_in">abs</span>(a[i])) flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;                        <span class="comment">//正数中的2.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(flag ? <span class="string">&quot;Yes\n&quot;</span> : <span class="string">&quot;No\n&quot;</span>);          <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解，洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P8537 花如幻想一般 题解</title>
      <link href="/2023/02/18/P8537_%E8%8A%B1%E5%A6%82%E5%B9%BB%E6%83%B3%E4%B8%80%E8%88%AC_%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/P8537_%E8%8A%B1%E5%A6%82%E5%B9%BB%E6%83%B3%E4%B8%80%E8%88%AC_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个长度为 $n$ 的序列 $a$。可以进行两种操作：</p><ol><li>将整个序列翻转；</li><li>将序列中的某个数加上某个整数。</li></ol><p>问：至少要用多少次操作可以将序列 $a$ 转化为序列 $b$。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>只要稍微思考一下，就可以得到一个结论：假设反转的次数为 $x$ </p><p>则 $0 \leq x \leq 1$ 所以，我们可以分别枚举两种情况，</p><p>第一种为不翻转，第二种为翻转。</p><p>然后分别得出两种序列后，遍历得出不翻转和翻转之后的数组与 $b$ 相对应的数不相同的数的个数后，取最小值就是答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">5</span> * <span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> a[NR + <span class="number">10</span>], b[NR + <span class="number">10</span>], c[NR + <span class="number">10</span>];</span><br><span class="line"><span class="comment">//  没有翻转   目标      翻转</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);<span class="comment">//输入</span></span><br><span class="line">        c[n - i + <span class="number">1</span>] = a[i];<span class="comment">//翻转</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);<span class="comment">//输入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;<span class="comment">//计算</span></span><br><span class="line">        cnt1 += a[i] != b[i];</span><br><span class="line">        cnt2 += c[i] != b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">min</span>(cnt1, cnt2));<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解，洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1156 垃圾陷阱 题解</title>
      <link href="/2023/02/18/P1156_%E5%9E%83%E5%9C%BE%E9%99%B7%E9%98%B1_%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/P1156_%E5%9E%83%E5%9C%BE%E9%99%B7%E9%98%B1_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>在一个深度为 $D$ 的坑内，有很多垃圾，一只牛在其中。每个垃圾可以用来吃和堆放（堆放垃圾<strong>不用花费</strong>时间）。 </p><p>已知每个垃圾进入坑内的时间 $t$ 、高度 $h$ 和能量值 $f$ ，如果当前有 $x$ 的能量值，就能继续存活 $x$ 小时。</p><p>问这只牛能否从坑里出来，如果能，输出能出来的最早时间，否则输出最长存活时间</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>第一眼看到题目想到了贪心，仔细阅读后发现和01背包更像一些，这里我用的是01背包的一个变形。</p><h2 id="思路部分"><a href="#思路部分" class="headerlink" title="思路部分"></a>思路部分</h2><p>我使用 $dp_j$ 表示高度为 $j$ 时的最大能量。题目中假设卡门当前体内有足够持续 $10$ 小时的能量，说以数组的初值就是 <code>dp[0] = 10</code> ， 题目中垃圾的顺序可能不按照到达时间来排列，所以读入完之后要按到达时间先后顺序。</p><p>然后就是01背包的变形，按顺序遍历每个垃圾，枚举所有的可能高度，分别把数组中这个垃圾用来吃和用来垫脚的状态分别更新，如果当前高度再垫上这个垃圾就可以出去的话就输出当前的时间。但这一切的前提条件是卡门没有饿死，所以还要判断卡门没有饿死才能执行。</p><p>如果循环结束卡门还没有出去，就说明他出不去，那维持生命的最长时间就是把垃圾全吃了的维持时间。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e2</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MR = <span class="number">1e2</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123; <span class="comment">//垃圾</span></span><br><span class="line"><span class="type">int</span> t, f, h;</span><br><span class="line">&#125;a[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> dp[MR + <span class="number">10</span>]; <span class="comment">//dp[j]表示高度为 j 时的最大能量</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.t &lt; y.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//读入</span></span><br><span class="line"><span class="type">int</span> d, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;d, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a[i].t, &amp;a[i].f, &amp;a[i].h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp); <span class="comment">//按照时间先后排序</span></span><br><span class="line"><span class="built_in">memset</span>(dp, ~<span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(dp)); <span class="comment">//初始化</span></span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">//初值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123; <span class="comment">//背包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = d;j &gt;= <span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[j] &gt;= a[i].t)&#123; <span class="comment">//还没饿死</span></span><br><span class="line"><span class="keyword">if</span>(j + a[i].h &gt;= d)&#123; <span class="comment">//出去了</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i].t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dp[j + a[i].h] = <span class="built_in">max</span>(dp[j + a[i].h], dp[j]); <span class="comment">//这个垃圾用来垫脚了</span></span><br><span class="line">dp[j] += a[i].f; <span class="comment">//吃垃圾</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">0</span>]); <span class="comment">//出不去, 全吃了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解 </category>
          
          <category> 洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/18/hello-world/"/>
      <url>/2023/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这是本蒟蒻辛辛苦苦建出来的博客，希望在上面发一些关于编程和计算机的东西。</p><p>这里写上我搭建这个博客按照的<a href="https://zhuanlan.zhihu.com/p/102592286">教程</a>如果有需要的话大家可以看看~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CF Round</title>
      <link href="/2023/02/18/CF_Round_#843_Div.2_vp_%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/CF_Round_#843_Div.2_vp_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Gardener-and-the-Capybaras-easy-version"><a href="#Gardener-and-the-Capybaras-easy-version" class="headerlink" title="Gardener and the Capybaras (easy version)"></a>Gardener and the Capybaras (easy version)</h1><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>纯暴力，<code>for</code> 循环确定每个子串的长度，用 <code>substr</code> 来截取子串。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        string tmp1, tmp2, tmp3;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt; len - i - <span class="number">1</span>;j++)&#123;</span><br><span class="line">                tmp1 = s.<span class="built_in">substr</span>(<span class="number">0</span>, i + <span class="number">1</span>);</span><br><span class="line">                tmp2 = s.<span class="built_in">substr</span>(i + <span class="number">1</span>, j);</span><br><span class="line">                tmp3 = s.<span class="built_in">substr</span>(i + j + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>((tmp1 &lt;= tmp2 &amp;&amp; tmp3 &lt;= tmp2) || (tmp1 &gt;= tmp2 &amp;&amp; tmp3 &gt;= tmp2))&#123;</span><br><span class="line">                    cout&lt;&lt;tmp1;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    cout&lt;&lt;tmp2;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    cout&lt;&lt;tmp3;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;:(\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gardener-and-the-Capybaras-hard-version"><a href="#Gardener-and-the-Capybaras-hard-version" class="headerlink" title="Gardener and the Capybaras (hard version)"></a>Gardener and the Capybaras (hard version)</h1><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>观察简单版的部分输出<br><a href="https://imgse.com/i/pSrIRG6"><img src="https://s1.ax1x.com/2023/02/02/pSrIRG6.jpg" alt="pSrIRG6.jpg"></a><br>发现以下情况：</p><ul><li><p>将输入字符串掐头去尾（从第二个到倒数第二个）后，若其中第 $i$ 位有 <code>a</code> ，则将字符串分成为(1, i - 1)(i, i)(i + 1, n)后可满足 $a \ge b,c \ge b$ 的条件</p></li><li><p>否则，将字符串分成为(1, 1)(2, n - 1)(n, n)三段，可满足 $a \le b,c\le b$ 的条件</p></li></ul><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; len - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; index;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>, s[index]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = index + <span class="number">1</span>;i &lt; len;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; len - <span class="number">1</span>;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c\n&quot;</span>, s[len - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gardener-and-the-Array"><a href="#Gardener-and-the-Array" class="headerlink" title="Gardener and the Array"></a>Gardener and the Array</h1><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>猜想 $x&#x3D;a$，$y$ 为 $a$ 中删除一个数字的子序列，则 $f(a) &#x3D; f(b) $时，必定有其他的数也有这一位。用数组统计，遍历所有数看能否删除。</p><p>PS：多组数据注意清空</p><p>PS2：时限卡得很紧，不能用普通的初始化方法</p><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    T a = (T)<span class="number">0</span>, b = (T)<span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">        b = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        a = ((T)a &lt;&lt; <span class="number">3</span>) + ((T)a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    x = a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; (T)<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; (T)<span class="number">9</span>)&#123;</span><br><span class="line">        <span class="built_in">write</span>(x / (T)<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % (T)<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> NR = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> MR = <span class="number">2</span> * <span class="number">1e5</span>;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; v[NR + <span class="number">10</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> cnt[MR + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> T;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            v[i].<span class="built_in">clear</span>();</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> k;</span><br><span class="line">            <span class="built_in">read</span>(k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">1</span>;j &lt;= k;j++)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">                <span class="built_in">read</span>(x);</span><br><span class="line">                v[i].<span class="built_in">emplace_back</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it : v[i])&#123;</span><br><span class="line">                cnt[it]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it : v[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(cnt[it] &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans |= flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it : v[i])&#123;</span><br><span class="line">                cnt[it]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ans ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Interesting-Sequence"><a href="#Interesting-Sequence" class="headerlink" title="Interesting Sequence"></a>Interesting Sequence</h1><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>PS：$lowbit(x)$ 的意义是 $x$ 的二进制位下最低为的一所代表的十进制值<br>PS2：$ lowbit(x)&#x3D;x\wedge(-x)$</p><p>可以看出：若有解时 $x \le n$（与不能增加，只能减少）, 且若有一位 $n$ 上为 $0$ 而 $x$ 为 $1$ 时，必定没有解（ $0 \wedge 1 &#x3D; 0$ ）。</p><p>并能由 $0 \wedge 1 &#x3D; 0$ 得出，一个数 $k$ 与运算任何在范围 $k + 1 \le p \le k + lowbit(k)$ 内的数 $p$ 进行与运算都等于 $k$ ，所以答案是若干次 <code>n += lowbit(n)</code> 后的 $n$。</p><p>PS3000: $\wedge$ 为  逻辑与</p><h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">1e3</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[NR + <span class="number">10</span>], b[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">lowbit</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;x);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tn = n, tx = x;</span><br><span class="line">    <span class="keyword">while</span>(tn)&#123;</span><br><span class="line">        a[++a[<span class="number">0</span>]] = tn % <span class="number">2ll</span>;</span><br><span class="line">        tn /= <span class="number">2ll</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tx)&#123;</span><br><span class="line">        b[++b[<span class="number">0</span>]] = tx % <span class="number">2ll</span>;</span><br><span class="line">        tx /= <span class="number">2ll</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">max</span>(a[<span class="number">0</span>], b[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != b[i] &amp;&amp; !a[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = n;</span><br><span class="line">    <span class="keyword">while</span>(tmp != x)&#123;</span><br><span class="line">        n += <span class="built_in">lowbit</span>(n);</span><br><span class="line">        tmp &amp;= n;</span><br><span class="line">        <span class="keyword">if</span>(tmp &lt; x)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解，CodeForces题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF Round</title>
      <link href="/2023/02/18/CF_Round_#843_Div.2_vp_%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/18/CF_Round_#843_Div.2_vp_%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>中规中矩的发挥吧</p><p><a href="https://imgse.com/i/pSr4ZsH"><img src="https://s1.ax1x.com/2023/02/02/pSr4ZsH.jpg" alt="pSr4ZsH.jpg"></a></p><p>速度慢了点，毕竟刚起来迷迷糊糊的就开始虚拟参赛。</p><p>A2题有一个地方忘加空格了，耻辱的WA了一发。</p><p>B题有点绕，刚开始说这啥玩意儿啊，后来在草稿纸上画了画蒙了一个思路，交了之后第一发RE，看了看发现一个数组开小了，又交了上去，顺便把int改成了long long，然后第二发就TLE on t2了（不清楚是不是long long更慢？）之后开启卡常，初始化优化，输入优化，终于第四发AC了。</p><p><a href="https://imgse.com/i/pSr5t1O"><img src="https://s1.ax1x.com/2023/02/02/pSr5t1O.jpg" alt="pSr5t1O.jpg"></a></p><p>之后因为还有课，早了15分钟结束比赛。</p><p>低级错误太多了。。</p><p>还有CF的格式有点陌生，经常看题的时候就忘看数据范围了。。</p><p>以后多思考再交（这赛制真坑啊），防止粗心大意白白扣几分。</p>]]></content>
      
      
      <categories>
          
          <category> 参赛总结，CodeForces题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 参赛总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1732D1 Balance (Easy version) 题解</title>
      <link href="/2023/02/18/CF1732D1_Balance%20(Easy%20version)%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/CF1732D1_Balance%20(Easy%20version)%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>见到这种题本能反应想到 stl 中的 <code>map</code>，解决了插入的问题；然后是询问，首先想到暴力枚举，每次询问由 $k \times 1$ 枚举到 $k \times t$，但这种做法显然会超时，所以考虑创建一个 <code>rem</code> 数组，记录之前的答案 $lastt$ 再由 $k \times lastt$ 向上枚举，复杂度较玄学，但可以 AC。<br>（答案会正确的原因是题目中没有删除操作，所以可以想象有一个数轴，$K$ 点表示的值为当前询问的答案，如果下一次训问之前，集合中插入表示 $K$ 的数，那<strong>答案的值只可能比 $K$ 表示的值大</strong>，因为比 $K$ 表示的值小的数都存在了，不能被取到。）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> op[<span class="number">3</span>];</span><br><span class="line">map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; rem;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);                     <span class="comment">//多组数据</span></span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%lld&quot;</span>, op + <span class="number">1</span>, &amp;x);         <span class="comment">//读入</span></span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">1</span>] == <span class="string">&#x27;+&#x27;</span>)&#123;                 <span class="comment">//插入操作</span></span><br><span class="line">            mp[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(rem[x]) k = rem[x];         <span class="comment">//从上次的答案开始枚举，若没有上次，从 1 开始</span></span><br><span class="line">            <span class="keyword">while</span>(mp[x * k]) k++;</span><br><span class="line">            rem[x] = k;                 <span class="comment">//更新</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, x * k);        <span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                           <span class="comment">//好习惯</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解，洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1140C Playlist 题解</title>
      <link href="/2023/02/18/CF1140C_Playlist_%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/02/18/CF1140C_Playlist_%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>你有一个有 $n$ 首歌曲的播放列表，第 $i$ 首歌有 $t_i$ 和 $b_i$ 两个特征——分别是它的长度和好听程度。</p><p>听这些歌的快乐程度等于这些歌的总长度乘他们中的最小的好听程度。举个例子，听三首长度为 $[5, 7, 4]$ 而好听程度为 $[11, 14, 6]$ 的歌曲获得的快乐程度等于 $(5 + 7 + 4) \times 6 &#x3D; 9$</p><p>你需要从你的播放列表中选出最多 $k$ 首歌，使听这些歌的快乐程度尽可能的大。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>第一眼看到题目就想到了贪心，按照好听程度大小排序，排序完后遍历所有的歌曲，选择当前遍历到的长度最长的前 $k$ 首歌曲，算出答案后更新最大值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NR = <span class="number">3</span> * <span class="number">1e5</span>;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line"><span class="type">int</span> t, b;</span><br><span class="line">&#125;a[NR + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node x, Node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.b &gt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//读入</span></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a[i].t, &amp;a[i].b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, cmp);<span class="comment">//按照好听程度排序</span></span><br><span class="line">   <span class="comment">//贪心</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> Max = INT_MIN;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">sum += <span class="number">1ll</span> * a[i].t;<span class="comment">//选取当前歌曲</span></span><br><span class="line">q.<span class="built_in">push</span>(a[i].t);</span><br><span class="line"><span class="keyword">if</span>((<span class="type">int</span>)q.<span class="built_in">size</span>() &gt; k)&#123;<span class="comment">//如果超出了 k 首歌</span></span><br><span class="line">sum -= <span class="number">1ll</span> * q.<span class="built_in">top</span>();<span class="comment">//就把长度最短的从已选的里面弹出</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">Max = <span class="built_in">max</span>(Max, sum * a[i].b);<span class="comment">//更新最大值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Max);<span class="comment">//输出</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程题解，洛谷题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
